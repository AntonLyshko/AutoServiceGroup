# Project Structure

```
├── src
│   ├── auth
│   │   └── useAuth.tsx
│   ├── components
│   │   ├── admin
│   │   │   ├── AdminHeader.tsx
│   │   │   ├── ImageManagerModal.tsx
│   │   │   └── ImagePreviewGrid.tsx
│   │   ├── CarCard.tsx
│   │   ├── CarsForSaleSection.tsx
│   │   ├── Contact.tsx
│   │   ├── Footer.tsx
│   │   ├── GalleryPreview.tsx
│   │   ├── Hero.tsx
│   │   ├── ImageCompare.tsx
│   │   ├── Loader.tsx
│   │   ├── MarkdownRenderer.tsx
│   │   ├── Navbar.tsx
│   │   ├── ServiceCard.tsx
│   │   └── ServicesSection.tsx
│   ├── img
│   │   ├── img_1.webp
│   │   └── img_2.png
│   ├── lib
│   │   └── utils.ts
│   ├── pages
│   │   ├── admin
│   │   │   ├── AdminLayout.tsx
│   │   │   ├── CarCreatePage.tsx
│   │   │   ├── CarEditPage.tsx
│   │   │   ├── CarListPage.tsx
│   │   │   ├── LoginPage.tsx
│   │   │   ├── ProtectedRoute.tsx
│   │   │   ├── ServiceCreatePage.tsx
│   │   │   ├── ServiceEditPage.tsx
│   │   │   ├── ServiceListPage.tsx
│   │   │   ├── SettingsEditPage.tsx
│   │   │   ├── WorkExampleCreatePage.tsx
│   │   │   ├── WorkExampleEditPage.tsx
│   │   │   └── WorkExampleListPage.tsx
│   │   ├── CarPage.tsx
│   │   ├── Gallery.tsx
│   │   ├── Home.tsx
│   │   ├── ServicePage.tsx
│   │   └── WorkExamplePage.tsx
│   ├── services
│   │   └── apiService.ts
│   ├── types
│   │   └── api.ts
│   ├── App.tsx
│   ├── index.css
│   ├── main.tsx
│   └── vite-env.d.ts
├── eslint.config.js
├── index.html
├── package-lock.json
├── package.json
├── postcss.config.js
├── tailwind.config.js
├── tsconfig.app.json
├── tsconfig.json
├── tsconfig.node.json
└── vite.config.ts
```

# File Contents

## src/App.tsx

```tsx
import React from 'react';
import { Outlet, ScrollRestoration } from 'react-router-dom';
import Navbar from './components/Navbar';
import Footer from './components/Footer';

function App() {
	return (
		<div className='min-h-screen bg-gray-900 text-white flex flex-col'>
			<Navbar />
			<ScrollRestoration />
			<main className='flex-grow'>
				{' '}
				<Outlet />
			</main>
			<Footer />
		</div>
	);
}

export default App;

```

## src/auth/useAuth.tsx

```tsx
import React, {
	createContext,
	useState,
	useContext,
	useMemo,
	useEffect,
	ReactNode,
} from 'react';
// УДАЛЯЕМ useNavigate, так как он здесь не должен использоваться
// import { useNavigate } from 'react-router-dom';

interface AuthContextType {
	isLoggedIn: boolean;
	login: (password: string) => boolean;
	logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Пароль хранится здесь для простоты. В реальном приложении так делать нельзя.
const ADMIN_PASSWORD = 'supersecretpassword';
const AUTH_STORAGE_KEY = 'isAdminLoggedIn';

export const AuthProvider = ({ children }: { children: ReactNode }) => {
	const [isLoggedIn, setIsLoggedIn] = useState<boolean>(() => {
		try {
			const storedValue = localStorage.getItem(AUTH_STORAGE_KEY);
			return storedValue === 'true';
		} catch {
			return false;
		}
	});
	// УДАЛЯЕМ const navigate = useNavigate();

	useEffect(() => {
		try {
			localStorage.setItem(AUTH_STORAGE_KEY, String(isLoggedIn));
		} catch (error) {
			console.error('Could not access localStorage:', error);
		}
	}, [isLoggedIn]);

	const login = (password: string): boolean => {
		if (password === ADMIN_PASSWORD) {
			setIsLoggedIn(true);
			return true;
		}
		alert('Неверный пароль!');
		return false;
	};

	// ИЗМЕНЯЕМ logout: он больше не отвечает за навигацию
	const logout = () => {
		setIsLoggedIn(false);
		// navigate('/'); // УДАЛЯЕМ
	};

	const value = useMemo(
		() => ({
			isLoggedIn,
			login,
			logout,
		}),
		[isLoggedIn]
	);

	return (
		<AuthContext.Provider value={value}>{children}</AuthContext.Provider>
	);
};

export const useAuth = (): AuthContextType => {
	const context = useContext(AuthContext);
	if (context === undefined) {
		throw new Error('useAuth must be used within an AuthProvider');
	}
	return context;
};

```

## src/components/CarCard.tsx

```tsx
import React from 'react';
import { Link } from 'react-router-dom';
import { TransformedCarPreview } from '../types/api';
import { CarFront } from 'lucide-react';

interface CarCardProps {
	car: TransformedCarPreview;
}

const CarCard: React.FC<CarCardProps> = ({ car }) => {
	return (
		<Link
			to={`/cars/${car.id}`}
			className='group block bg-gray-800 rounded-lg overflow-hidden shadow-lg hover:shadow-red-500/40 transition-all duration-300'
		>
			<div className='relative w-full h-56 md:h-64 bg-gray-700'>
				{car.imageUrl && car.imageUrl !== '/placeholder.png' ? (
					<img
						src={car.imageUrl}
						alt={car.title}
						className='w-full h-full object-cover'
						loading='lazy'
					/>
				) : (
					<div className='w-full h-full flex items-center justify-center text-gray-500'>
						<CarFront size={64} />
					</div>
				)}
				<div className='absolute inset-0 bg-gradient-to-t from-black/70 via-black/40 to-transparent opacity-80 group-hover:opacity-90 transition-opacity duration-300'></div>
			</div>
			<div className='p-5'>
				<h3 className='text-xl font-semibold text-white mb-2 truncate group-hover:text-red-500 transition-colors duration-300'>
					{car.title}
				</h3>
				<p className='text-2xl font-bold text-red-500 mb-3'>{car.cost}</p>
				<span className='inline-block w-full text-center bg-red-600 group-hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-md transition-colors duration-300'>
					Подробнее
				</span>
			</div>
		</Link>
	);
};

export default CarCard;

```

## src/components/CarsForSaleSection.tsx

```tsx
import React from 'react';
import { useQuery } from '@tanstack/react-query';
import { fetchCars } from '../services/apiService';
import { TransformedCarPreview } from '../types/api';
import CarCard from './CarCard';
import Loader from './Loader';
import { useAuth } from '../auth/useAuth';
import { Link } from 'react-router-dom';
import { PlusCircle } from 'lucide-react';

const CarsForSaleSection = () => {
	const { isLoggedIn } = useAuth();
	const {
		data: cars,
		isLoading,
		error,
	} = useQuery<TransformedCarPreview[]>({
		queryKey: ['carsForSale'],
		queryFn: fetchCars,
	});

	if (isLoading && !cars) {
		return (
			<section className='py-20 bg-gray-900'>
				<div className='container mx-auto px-4 flex justify-center items-center h-64'>
					<Loader size='lg' text='Загрузка автомобилей...' />
				</div>
			</section>
		);
	}

	if (error) {
		return (
			<section className='py-20 bg-gray-900'>
				<div className='container mx-auto px-4 text-center text-red-500'>
					Ошибка загрузки автомобилей на продажу.
				</div>
			</section>
		);
	}

	if (!cars || cars.length === 0) {
		return (
			<section id='cars-for-sale' className='py-20 bg-gray-900'>
				<div className='container mx-auto px-4'>
					<div className='text-center mb-12 relative'>
						<h2 className='text-3xl md:text-4xl font-bold text-white mb-4'>
							Автомобили на продажу
						</h2>
						{isLoggedIn && (
							<Link
								to='/admin/cars/new'
								className='absolute top-0 right-0 -mt-2 bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-md transition-colors flex items-center gap-2'
							>
								<PlusCircle size={20} />
								Создать
							</Link>
						)}
						<p className='text-gray-400 max-w-2xl mx-auto'>
							В данный момент нет автомобилей в продаже. Загляните позже!
						</p>
					</div>
				</div>
			</section>
		);
	}

	return (
		<section id='cars-for-sale' className='py-20 bg-gray-900'>
			<div className='container mx-auto px-4'>
				<div className='text-center mb-12 relative'>
					<h2 className='text-3xl md:text-4xl font-bold text-white mb-4'>
						Автомобили на продажу
					</h2>
					{isLoggedIn && (
						<Link
							to='/admin/cars/new'
							className='absolute top-0 right-0 -mt-2 bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-md transition-colors flex items-center gap-2'
						>
							<PlusCircle size={20} />
							Создать
						</Link>
					)}
					<p className='text-gray-400 max-w-2xl mx-auto'>
						Ознакомьтесь с автомобилями, доступными для покупки в нашем
						автосервисе.
					</p>
				</div>

				<div className='grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 md:gap-8'>
					{cars.map((car) => (
						<CarCard key={car.id} car={car} />
					))}
				</div>
			</div>
		</section>
	);
};

export default CarsForSaleSection;

```

## src/components/Contact.tsx

```tsx
import React from 'react';
import { PhoneCall, Clock, MapPin } from 'lucide-react';
import { useQuery } from '@tanstack/react-query';
import { fetchSettings } from '../services/apiService';
import { SiteSettings } from '../types/api';
import Loader from './Loader';

const Contact = () => {
	const { data: settings, isLoading: isLoadingSettings } =
		useQuery<SiteSettings | null>({
			queryKey: ['siteSettings'],
			queryFn: fetchSettings,
		});

	const phoneLink = settings?.phoneLink || '#';
	const displayPhone = settings?.phoneNumber || 'Загрузка...';
	const displayAddress = settings?.address || 'Загрузка...';
	const displayWorkingHours = settings?.workingHours || '10:00-22:00';

	const encodedAddress = encodeURIComponent(
		displayAddress || 'Березовский, Транспортников 42А'
	);
	const mapSrc = `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2181.6180769263375!2d60.8088433!3d56.911438!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x43c16ef7c6fa7b47%3A0xa7e554c1ab3edbd8!2z0YPQuy4g0KLRgNCw0L3RgdC_0L7RgNGC0L3QuNC60L7QsiwgNDLQkCwg0JHQtdGA0ZHQt9C-0LLRgdC60LjQuSwg0KHQstC10YDQtNC70L7QstGB0LrQsNGPINC-0LHQuy4sIDYyMzcwMg!5e0!3m2!1sru!2sru!4v1716915066364!5m2!1sru!2sru&q=${encodedAddress}`;

	return (
		<section id='contact' className='py-20 bg-gray-900'>
			<div className='container mx-auto px-4'>
				<div className='text-center mb-12'>
					<h2 className='text-3xl md:text-4xl font-bold text-white mb-4'>
						Контакты
					</h2>
					<p className='text-gray-400 max-w-2xl mx-auto'>
						Свяжитесь с нами или приезжайте прямо сейчас, чтобы получить
						консультацию по ремонту и обслуживанию вашего автомобиля
					</p>
				</div>

				<div className='grid grid-cols-1 md:grid-cols-2 gap-8 items-center'>
					<div className='bg-gray-800 p-8 rounded-lg shadow-lg'>
						<h3 className='text-2xl font-bold text-white mb-6'>
							Наши контакты
						</h3>
						{isLoadingSettings && !settings ? (
							<div className='space-y-6 flex justify-center items-center min-h-[200px]'>
								<Loader size='md' text='Загрузка контактов...' />
							</div>
						) : (
							<div className='space-y-6'>
								<div className='flex items-start'>
									<div className='bg-red-600 p-3 rounded-full mr-4'>
										<PhoneCall size={24} className='text-white' />
									</div>
									<div>
										<h4 className='text-lg font-semibold text-white'>
											Телефон
										</h4>
										<a
											href={phoneLink}
											className='text-gray-300 hover:text-red-500 transition-colors'
										>
											{displayPhone}
										</a>
									</div>
								</div>

								<div className='flex items-start'>
									<div className='bg-red-600 p-3 rounded-full mr-4'>
										<Clock size={24} className='text-white' />
									</div>
									<div>
										<h4 className='text-lg font-semibold text-white'>
											Часы работы
										</h4>
										<p className='text-gray-300'>{displayWorkingHours}</p>
									</div>
								</div>

								<div className='flex items-start'>
									<div className='bg-red-600 p-3 rounded-full mr-4'>
										<MapPin size={24} className='text-white' />
									</div>
									<div>
										<h4 className='text-lg font-semibold text-white'>
											Адрес
										</h4>
										<p className='text-gray-300'>{displayAddress}</p>
									</div>
								</div>
							</div>
						)}
					</div>

					<div className='h-[400px] rounded-lg overflow-hidden shadow-lg'>
						{isLoadingSettings && !settings ? (
							<div className='w-full h-full flex items-center justify-center bg-gray-700'>
								<Loader size='lg' text='Загрузка карты...' />
							</div>
						) : (
							<iframe
								src={mapSrc}
								width='100%'
								height='100%'
								style={{ border: 0 }}
								allowFullScreen
								loading='lazy'
								referrerPolicy='no-referrer-when-downgrade'
								title='Auto Service location'
							></iframe>
						)}
					</div>
				</div>
			</div>
		</section>
	);
};

export default Contact;

```

## src/components/Footer.tsx

```tsx
import React from 'react';
import { Link } from 'react-router-dom';
import { PhoneCall, Clock, MapPin } from 'lucide-react';
import { useQuery } from '@tanstack/react-query';
import { fetchSettings, fetchServices } from '../services/apiService';
import { SiteSettings, TransformedService } from '../types/api';
import Loader from './Loader';

const Footer = () => {
	const currentYear = new Date().getFullYear();

	const { data: settings, isLoading: isLoadingSettings } =
		useQuery<SiteSettings | null>({
			queryKey: ['siteSettings'],
			queryFn: fetchSettings,
		});

	const { data: services, isLoading: isLoadingServices } = useQuery<
		TransformedService[]
	>({
		queryKey: ['services'],
		queryFn: fetchServices,
	});

	const phoneLink = settings?.phoneLink || '#';
	const displayPhone = settings?.phoneNumber || 'Загрузка...';
	const displayAddress = settings?.address || 'Загрузка...';
	const displayWorkingHours = settings?.workingHours || '10:00-22:00';
	const footerServices = services?.slice(0, 6) || [];

	return (
		<footer className='bg-gray-950 text-white'>
			<div className='container mx-auto px-4 py-12'>
				<div className='grid grid-cols-1 md:grid-cols-3 gap-8'>
					<div>
						<Link
							to='/'
							className='text-2xl font-bold flex items-center mb-4'
						>
							<span className='text-red-600'>ТрейдАвто</span>-групп
						</Link>
						<p className='text-gray-400 mb-6'>
							Профессиональный ремонт и обслуживание автомобилей любых
							марок с использованием современного оборудования
						</p>
					</div>

					<div>
						<h3 className='text-xl font-semibold mb-4 text-white'>
							Услуги
						</h3>
						{isLoadingServices ? (
							<div className='space-y-2'>
								{[...Array(6)].map((_, i) => (
									<div
										key={i}
										className='h-5 bg-gray-700 rounded w-3/4 animate-pulse'
									/>
								))}
							</div>
						) : (
							<ul className='space-y-2'>
								{footerServices.map((service) => (
									<li key={service.id}>
										<Link
											to={`/services/${service.id}`}
											className='text-gray-400 hover:text-red-500 transition-colors'
										>
											{service.title}
										</Link>
									</li>
								))}
							</ul>
						)}
					</div>

					<div>
						<h3 className='text-xl font-semibold mb-4 text-white'>
							Контакты
						</h3>
						{isLoadingSettings && !settings ? (
							<div className='space-y-4 min-h-[100px] flex items-center'>
								<Loader size='sm' text='Загрузка контактов...' />
							</div>
						) : (
							<div className='space-y-4'>
								<div className='flex items-center'>
									<PhoneCall size={20} className='text-red-500 mr-3' />
									<a
										href={phoneLink}
										className='text-gray-400 hover:text-red-500 transition-colors'
									>
										{displayPhone}
									</a>
								</div>
								<div className='flex items-center'>
									<Clock size={20} className='text-red-500 mr-3' />
									<span className='text-gray-400'>
										{displayWorkingHours}
									</span>
								</div>
								<div className='flex items-start'>
									<MapPin size={20} className='text-red-500 mr-3 mt-1' />
									<span className='text-gray-400'>{displayAddress}</span>
								</div>
							</div>
						)}
					</div>
				</div>

				<div className='border-t border-gray-800 mt-12 pt-6 text-center'>
					<p className='text-gray-500'>
						© {currentYear} ТрейдАвто-групп. Все права защищены.
					</p>
				</div>
			</div>
		</footer>
	);
};

export default Footer;

```

## src/components/GalleryPreview.tsx

```tsx
import React from 'react';
import { Link } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import { fetchWorkExamples } from '../services/apiService';
import { TransformedWorkExamplePreview } from '../types/api';
import ImageCompare from './ImageCompare';
import Loader from './Loader';

const GalleryPreview = () => {
	const {
		data: workExamples,
		isLoading,
		error,
	} = useQuery<TransformedWorkExamplePreview[]>({
		queryKey: ['workExamples'],
		queryFn: fetchWorkExamples,
	});

	if (isLoading && !workExamples) {
		return (
			<section className='py-20 bg-gray-950'>
				<div className='container mx-auto px-4 flex justify-center items-center h-96'>
					<Loader size='lg' text='Загрузка примеров работ...' />
				</div>
			</section>
		);
	}

	if (error) {
		return (
			<section className='py-20 bg-gray-950'>
				<div className='container mx-auto px-4 text-center text-red-500'>
					Ошибка загрузки примеров работ.
				</div>
			</section>
		);
	}

	const previewItems = workExamples?.slice(0, 6) || [];

	return (
		<section className='py-20 bg-gray-950'>
			<div className='container mx-auto px-4'>
				<div className='text-center mb-12'>
					<h2 className='text-3xl md:text-4xl font-bold text-white mb-4'>
						Наши работы
					</h2>
					<p className='text-gray-400 max-w-2xl mx-auto'>
						Примеры выполненных работ по ремонту, обслуживанию и детейлингу
						автомобилей.
					</p>
				</div>

				{previewItems.length === 0 && !isLoading && (
					<p className='text-center text-gray-400'>
						Примеров работ пока нет.
					</p>
				)}

				<div className='grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-10 mb-12'>
					{previewItems.map((item) => (
						<div key={item.id} className='group'>
							<Link to={`/work-examples/${item.id}`}>
								<div className='relative overflow-hidden rounded-lg h-[350px] md:h-[400px] mb-3 bg-gray-800'>
									{item.previewImage.type === 'single' ? (
										<img
											src={item.previewImage.imageUrl}
											alt={item.title}
											className='w-full h-full object-cover transition-transform duration-500 group-hover:scale-110'
											loading='lazy'
										/>
									) : (
										<ImageCompare
											beforeImage={item.previewImage.beforeImage}
											afterImage={item.previewImage.afterImage}
											altBefore={`До - ${item.title}`}
											altAfter={`После - ${item.title}`}
										/>
									)}
								</div>
							</Link>
							<div>
								<h4 className='text-lg font-semibold text-white mb-1'>
									<Link
										to={`/work-examples/${item.id}`}
										className='hover:text-red-500'
									>
										{item.title}
									</Link>
									{item.previewImage.type === 'beforeAfter' && (
										<span className='text-sm text-gray-400 ml-2'>
											(До/После)
										</span>
									)}
								</h4>
								<p className='text-gray-300 text-sm'>{item.description}</p>
							</div>
						</div>
					))}
				</div>

				{previewItems.length > 0 && (
					<div className='text-center'>
						<Link
							to='/gallery'
							className='inline-block bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-8 rounded-md transition-colors duration-300'
						>
							Смотреть все работы
						</Link>
					</div>
				)}
			</div>
		</section>
	);
};

export default GalleryPreview;

```

## src/components/Hero.tsx

```tsx
import React from 'react';
import { ChevronDown, MessageCircle } from 'lucide-react';
import { useQuery } from '@tanstack/react-query';
import { fetchSettings } from '../services/apiService';
import { SiteSettings } from '../types/api';
import Loader from './Loader';

const Hero = () => {
	const {
		data: settings,
		isLoading: isLoadingSettings,
		error: errorSettings,
	} = useQuery<SiteSettings | null>({
		queryKey: ['siteSettings'],
		queryFn: fetchSettings,
	});

	const scrollToContent = () => {
		window.scrollTo({
			top: window.innerHeight,
			behavior: 'smooth',
		});
	};

	// Если основные данные еще не загружены (и нет данных в кеше)
	if (isLoadingSettings && !settings) {
		return (
			<div className='relative h-screen w-full bg-gray-900 flex items-center justify-center'>
				<Loader size='xl' text='Загрузка...' textColor='text-white' />
			</div>
		);
	}

	if (errorSettings) {
		console.error('Ошибка загрузки настроек для Hero:', errorSettings);
	}

	const title = settings?.mainTitle || 'Автосервис';
	const secondTitle = settings?.mainSubtitle || 'ТрейдАвто-групп';
	const description =
		'Профессиональный ремонт и обслуживание автомобилей любых марок с использованием современного оборудования и оригинальных запчастей';
	const heroBackgroundImageUrl = '/img/img_1.webp'; // Используем статическое изображение
	const whatsAppLink = settings?.whatsappLink || '#';

	return (
		<div
			className='relative h-screen w-full bg-cover bg-center flex items-center transition-all duration-500'
			style={{
				backgroundImage: `url(${heroBackgroundImageUrl})`,
				backgroundPosition: 'center',
				backgroundSize: 'cover',
			}}
		>
			<div className='absolute inset-0 bg-gradient-to-b from-black/70 via-black/60 to-black/80 z-0'></div>

			<div className='container mx-auto px-4 z-10 text-center'>
				<h1 className='text-4xl md:text-6xl font-bold text-white mb-6'>
					{title}
					<br />
					<span className='text-red-600 relative top-2'>
						{secondTitle}
					</span>
				</h1>
				<p className='text-xl md:text-2xl text-gray-300 mb-8 max-w-3xl mx-auto'>
					{description}
				</p>
				<div className='flex flex-col sm:flex-row justify-center gap-4'>
					{isLoadingSettings && !settings ? (
						<div className='py-3 px-8 bg-green-600 text-white font-semibold rounded-md flex items-center justify-center opacity-80 min-w-[230px] h-[48px]'>
							<Loader
								size='xs'
								spinnerClassName='border-white border-t-transparent'
							/>
						</div>
					) : (
						<a
							href={whatsAppLink}
							target='_blank'
							rel='noopener noreferrer'
							className='py-3 px-8 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md transition-colors duration-300 flex items-center justify-center min-w-[230px] h-[48px]'
						>
							<MessageCircle className='mr-2' size={20} />
							Написать в WhatsApp
						</a>
					)}
					<button
						onClick={scrollToContent}
						className='py-3 px-8 bg-transparent border-2 border-white hover:bg-white hover:text-gray-900 text-white font-semibold rounded-md transition-all duration-300'
					>
						Узнать больше
					</button>
				</div>
			</div>

			<div className='absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce'>
				<button
					onClick={scrollToContent}
					className='text-white focus:outline-none'
					aria-label='Scroll down'
				>
					<ChevronDown size={32} />
				</button>
			</div>
		</div>
	);
};

export default Hero;

```

## src/components/ImageCompare.tsx

```tsx
import React, { useState, useRef, useCallback, useEffect } from 'react';

interface ImageCompareProps {
	beforeImage: string;
	afterImage: string;
	altBefore?: string;
	altAfter?: string;
}

const ImageCompare: React.FC<ImageCompareProps> = ({
	beforeImage,
	afterImage,
	altBefore = 'Before',
	altAfter = 'After',
}) => {
	const [sliderPosition, setSliderPosition] = useState<number>(50); // Позиция слайдера в %
	const [isDragging, setIsDragging] = useState<boolean>(false); // Только для тач
	const containerRef = useRef<HTMLDivElement>(null);
	const handleRef = useRef<HTMLDivElement>(null);
	// Убрали beforeImageRef, так как clip-path применяется прямо к img

	const updateSliderPosition = useCallback((clientX: number) => {
		if (!containerRef.current) return;
		const rect = containerRef.current.getBoundingClientRect();
		let x = clientX - rect.left;
		x = Math.max(0, Math.min(x, rect.width));
		const percent = (x / rect.width) * 100;
		setSliderPosition(percent);
	}, []);

	const handleMouseMove = useCallback(
		(e: React.MouseEvent<HTMLDivElement>) => {
			updateSliderPosition(e.clientX);
		},
		[updateSliderPosition]
	);

	const handleTouchStart = useCallback(
		(e: React.TouchEvent<HTMLDivElement>) => {
			if (
				e.target === handleRef.current ||
				handleRef.current?.contains(e.target as Node)
			) {
				setIsDragging(true);
				if (e.touches.length > 0) {
					updateSliderPosition(e.touches[0].clientX);
				}
			}
		},
		[updateSliderPosition]
	);

	const handleTouchMove = useCallback(
		(e: TouchEvent) => {
			if (!isDragging) return;
			if (e.touches.length > 0) {
				updateSliderPosition(e.touches[0].clientX);
			}
		},
		[isDragging, updateSliderPosition]
	);

	const handleTouchEnd = useCallback(() => {
		if (isDragging) {
			setIsDragging(false);
		}
	}, [isDragging]);

	useEffect(() => {
		if (isDragging) {
			document.addEventListener('touchmove', handleTouchMove, {
				passive: false,
			});
			document.addEventListener('touchend', handleTouchEnd);
			document.addEventListener('touchcancel', handleTouchEnd);
			document.body.style.overflow = 'hidden';
		} else {
			document.body.style.overflow = '';
		}
		return () => {
			document.removeEventListener('touchmove', handleTouchMove);
			document.removeEventListener('touchend', handleTouchEnd);
			document.removeEventListener('touchcancel', handleTouchEnd);
			document.body.style.overflow = '';
		};
	}, [isDragging, handleTouchMove, handleTouchEnd]);

	return (
		<div
			ref={containerRef}
			className='relative w-full h-full overflow-hidden select-none'
			onMouseMove={handleMouseMove}
			onTouchStart={handleTouchStart}
		>
			{/* After Image (Базовый слой) */}
			<img
				src={afterImage}
				alt={altAfter}
				className='absolute top-0 left-0 w-full h-full object-cover pointer-events-none'
				loading='lazy'
			/>

			{/* Before Image (Слой с маской) */}
			{/* Теперь clip-path применяется прямо к изображению */}
			<img
				src={beforeImage}
				alt={altBefore}
				className='absolute top-0 left-0 w-full h-full object-cover pointer-events-none'
				style={{
					// clipPath: `inset(0px ${100 - sliderPosition}% 0px 0px)`, // Стандартный синтаксис
					clipPath: `polygon(0 0, ${sliderPosition}% 0, ${sliderPosition}% 100%, 0 100%)`, // Через полигон, более надежно
				}}
				loading='lazy'
			/>

			{/* Slider Handle */}
			<div
				ref={handleRef}
				className='absolute top-0 bottom-0 w-1 bg-red-600 z-10 pointer-events-none md:pointer-events-auto'
				style={{
					left: `calc(${sliderPosition}% - 0.5px)`,
					touchAction: 'none',
				}}
			>
				{/* Визуальный элемент ползунка */}
				<div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-10 h-10 rounded-full bg-red-600 border-2 border-white flex items-center justify-center shadow-md'>
					<svg
						xmlns='http://www.w3.org/2000/svg'
						fill='none'
						viewBox='0 0 24 24'
						strokeWidth={2}
						stroke='white'
						className='w-6 h-6'
					>
						<path
							strokeLinecap='round'
							strokeLinejoin='round'
							d='M8.25 15L12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9'
						/>
					</svg>
				</div>
			</div>
		</div>
	);
};

export default ImageCompare;

```

## src/components/Loader.tsx

```tsx
import React from 'react';

interface LoaderProps {
	size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
	text?: string;
	className?: string; // For the container div
	spinnerClassName?: string; // For the spinner div itself
	textColor?: string; // For the text color
}

const Loader: React.FC<LoaderProps> = ({
	size = 'md',
	text,
	className = '',
	spinnerClassName = '',
	textColor = 'text-gray-300',
}) => {
	let sizeClasses = '';
	let textSizeClass = 'text-sm';

	switch (size) {
		case 'xs':
			sizeClasses = 'w-4 h-4 border-2';
			textSizeClass = 'text-xs';
			break;
		case 'sm':
			sizeClasses = 'w-6 h-6 border-2';
			textSizeClass = 'text-sm';
			break;
		case 'md':
			sizeClasses = 'w-10 h-10 border-4';
			textSizeClass = 'text-base';
			break;
		case 'lg':
			sizeClasses = 'w-16 h-16 border-4';
			textSizeClass = 'text-lg';
			break;
		case 'xl':
			sizeClasses = 'w-24 h-24 border-4';
			textSizeClass = 'text-xl';
			break;
		default:
			sizeClasses = 'w-10 h-10 border-4';
			textSizeClass = 'text-base';
	}

	return (
		<div
			className={`flex flex-col items-center justify-center ${className}`}
		>
			<div
				className={`animate-spin rounded-full border-solid border-red-500 border-t-transparent ${sizeClasses} ${spinnerClassName}`}
				role='status' // For accessibility
				aria-live='polite'
				aria-label={text ? undefined : 'Загрузка'}
			>
				<span className='sr-only'>Загрузка...</span>{' '}
				{/* For screen readers */}
			</div>
			{text && (
				<p className={`mt-2 ${textSizeClass} ${textColor}`}>{text}</p>
			)}
		</div>
	);
};

export default Loader;

```

## src/components/MarkdownRenderer.tsx

```tsx
import React from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';

interface MarkdownRendererProps {
	content: string;
	className?: string;
}

const MarkdownRenderer: React.FC<MarkdownRendererProps> = ({
	content,
	className = '',
}) => {
	return (
		<div
			className={`prose prose-invert max-w-none text-gray-300 ${className}`}
		>
			<ReactMarkdown
				remarkPlugins={[remarkGfm]}
				components={{
					// Кастомизация рендеринга тегов при необходимости
					h1: ({ node, ...props }) => (
						<h1 className='text-white' {...props} />
					),
					h2: ({ node, ...props }) => (
						<h2 className='text-white' {...props} />
					),
					h3: ({ node, ...props }) => (
						<h3 className='text-white' {...props} />
					),
					a: ({ node, ...props }) => (
						<a className='text-red-500 hover:text-red-400' {...props} />
					),
					ul: ({ node, ...props }) => (
						<ul className='list-disc list-inside' {...props} />
					),
					ol: ({ node, ...props }) => (
						<ol className='list-decimal list-inside' {...props} />
					),
				}}
			>
				{content}
			</ReactMarkdown>
		</div>
	);
};

export default MarkdownRenderer;

```

## src/components/Navbar.tsx

```tsx
import React, { useState, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { Menu, X, PhoneCall, Clock, MapPin, Car } from 'lucide-react';
import { useQuery } from '@tanstack/react-query';
import { fetchServices, fetchSettings } from '../services/apiService';
import { TransformedService, SiteSettings } from '../types/api';
import Loader from './Loader';

const Navbar = () => {
	const [isOpen, setIsOpen] = useState(false);
	const [scrolled, setScrolled] = useState(false);
	const location = useLocation();

	const { data: servicesData, isLoading: isLoadingServices } = useQuery<
		TransformedService[]
	>({
		queryKey: ['services'],
		queryFn: fetchServices,
	});

	const { data: settings, isLoading: isLoadingSettings } =
		useQuery<SiteSettings | null>({
			queryKey: ['siteSettings'],
			queryFn: fetchSettings,
		});

	useEffect(() => {
		const handleScroll = () => {
			const isScrolled = window.scrollY > 10;
			if (isScrolled !== scrolled) {
				setScrolled(isScrolled);
			}
		};
		window.addEventListener('scroll', handleScroll);
		return () => window.removeEventListener('scroll', handleScroll);
	}, [scrolled]);

	useEffect(() => {
		closeMenu();
	}, [location.pathname, location.hash]);

	const toggleMenu = () => setIsOpen(!isOpen);
	const closeMenu = () => setIsOpen(false);

	const handleNavClick = (
		e: React.MouseEvent<HTMLAnchorElement>,
		hash: string
	) => {
		closeMenu();
		if (location.pathname === '/' && hash) {
			e.preventDefault();
			const element = document.getElementById(hash.substring(1));
			element?.scrollIntoView({ behavior: 'smooth' });
		}
	};

	const navServices = servicesData || [];
	const phoneLink = settings?.phoneLink || '#';
	const displayPhone = settings?.phoneNumber || 'Загрузка...';
	const displayAddress = settings?.address || 'Загрузка...';
	const displayWorkingHours = settings?.workingHours || '10:00-22:00';

	return (
		<header
			className={`fixed w-full z-50 transition-all duration-300 ${
				scrolled
					? 'bg-gray-900/95 backdrop-blur-sm shadow-lg'
					: 'bg-gradient-to-b from-gray-950/70 via-gray-950/50 to-transparent'
			}`}
		>
			<div className='container mx-auto px-4'>
				<div className='flex justify-between items-center py-3'>
					<Link
						to='/'
						className='text-2xl font-bold text-white flex items-center'
						onClick={closeMenu}
					>
						ТрейдАвто<span className='text-red-600'>-групп</span>
					</Link>
					<div className='flex items-center space-x-4'>
						<div className='hidden md:flex items-center space-x-6 text-gray-300'>
							<div className='flex items-center h-5'>
								<PhoneCall size={18} className='mr-2 text-red-500' />
								{isLoadingSettings && !settings ? (
									<Loader
										size='xs'
										spinnerClassName='border-gray-300 border-t-transparent'
									/>
								) : (
									<a
										href={phoneLink}
										className='hover:text-red-500 transition-colors text-sm lg:text-base'
									>
										{displayPhone}
									</a>
								)}
							</div>
							<div className='flex items-center h-5'>
								<MapPin size={18} className='mr-2 text-red-500' />
								{isLoadingSettings && !settings ? (
									<Loader
										size='xs'
										spinnerClassName='border-gray-300 border-t-transparent'
									/>
								) : (
									<span className='text-sm lg:text-base'>
										{displayAddress}
									</span>
								)}
							</div>
						</div>
						<button
							className='md:hidden text-white focus:outline-none'
							onClick={toggleMenu}
							aria-label='Toggle menu'
						>
							{isOpen ? <X size={24} /> : <Menu size={24} />}
						</button>
					</div>
				</div>

				<hr
					className={`border-gray-700/50 hidden md:block ${
						scrolled ? '' : 'opacity-0'
					}`}
				/>

				<nav className='hidden md:flex items-center justify-start flex-wrap py-2 gap-x-3 lg:gap-x-4 min-h-[36px]'>
					{isLoadingServices && !navServices.length ? (
						<div className='flex items-center h-[36px] py-2'>
							<Loader
								size='sm'
								text='Загрузка меню...'
								textColor='text-gray-400'
							/>
						</div>
					) : (
						<>
							{navServices.map((service) => (
								<Link
									key={service.id}
									to={`/services/${service.id}`}
									className='text-gray-300 hover:text-red-500 transition-colors text-sm lg:text-base whitespace-nowrap py-1 px-1 font-semibold'
								>
									{service.title}
								</Link>
							))}
						</>
					)}
					<Link
						to='/gallery'
						className='text-gray-300 hover:text-red-500 transition-colors text-sm lg:text-base whitespace-nowrap py-1 px-1 font-semibold'
					>
						Наши работы
					</Link>
					<Link
						to='/#cars-for-sale'
						onClick={(e) => handleNavClick(e, '#cars-for-sale')}
						className='text-gray-300 hover:text-red-500 transition-colors text-sm lg:text-base whitespace-nowrap py-1 px-1 font-semibold flex items-center'
					>
						<Car size={18} className='mr-1.5 text-red-500' />
						Авто на продажу
					</Link>
					<Link
						to='/#contact'
						onClick={(e) => handleNavClick(e, '#contact')}
						className='text-gray-300 hover:text-red-500 transition-colors text-sm lg:text-base whitespace-nowrap py-1 px-1 font-semibold'
					>
						Контакты
					</Link>
				</nav>
			</div>

			<div
				className={`md:hidden fixed inset-0 bg-gray-900 z-40 transform transition-transform duration-300 ease-in-out ${
					isOpen ? 'translate-x-0' : 'translate-x-full'
				}`}
			>
				<button
					className='absolute top-6 right-5 text-white focus:outline-none'
					onClick={closeMenu}
					aria-label='Close menu'
				>
					<X size={28} />
				</button>
				<div className='flex flex-col h-full overflow-y-auto py-20 px-4 space-y-4'>
					<h3 className='text-xl font-semibold text-white border-b border-gray-700 pb-2'>
						Услуги
					</h3>
					<div className='flex flex-col space-y-3 pl-2 min-h-[60px]'>
						{isLoadingServices && !navServices.length ? (
							<Loader
								size='sm'
								text='Загрузка услуг...'
								textColor='text-gray-400'
							/>
						) : (
							navServices.map((service) => (
								<Link
									key={service.id}
									to={`/services/${service.id}`}
									className='block text-gray-300 hover:text-red-500 transition-colors text-lg'
								>
									{service.title}
								</Link>
							))
						)}
					</div>
					<Link
						to='/gallery'
						className='text-xl text-white hover:text-red-500 transition-colors pt-2 border-t border-gray-700 mt-4'
					>
						Наши работы
					</Link>
					<Link
						to='/#cars-for-sale'
						onClick={(e) => handleNavClick(e, '#cars-for-sale')}
						className='text-xl text-white hover:text-red-500 transition-colors pt-2 flex items-center'
					>
						<Car size={22} className='mr-2 text-red-500' />
						Авто на продажу
					</Link>
					<Link
						to='/#contact'
						onClick={(e) => handleNavClick(e, '#contact')}
						className='text-xl text-white hover:text-red-500 transition-colors pt-2'
					>
						Контакты
					</Link>
					<div className='mt-auto pt-6 border-t border-gray-700 space-y-4 min-h-[120px]'>
						{isLoadingSettings && !settings ? (
							<div className='flex justify-center pt-4'>
								<Loader
									size='sm'
									text='Загрузка контактов...'
									textColor='text-gray-400'
								/>
							</div>
						) : (
							<>
								<div className='flex items-center text-white'>
									<PhoneCall size={20} className='mr-3 text-red-500' />
									<a href={phoneLink} className='text-lg'>
										{displayPhone}
									</a>
								</div>
								<div className='flex items-center text-white'>
									<Clock size={20} className='mr-3 text-red-500' />
									<span className='text-lg'>{displayWorkingHours}</span>
								</div>
								<div className='flex items-start text-white'>
									<MapPin size={20} className='mr-3 text-red-500 mt-1' />
									<span className='text-lg'>{displayAddress}</span>
								</div>
							</>
						)}
					</div>
				</div>
			</div>
		</header>
	);
};

export default Navbar;

```

## src/components/ServiceCard.tsx

```tsx
import React from 'react';
import { Link } from 'react-router-dom';
import { ArrowRight } from 'lucide-react';

interface ServiceCardProps {
	id: string;
	title: string;
	description: string;
	imageUrl: string;
	index: number;
}

const ServiceCard: React.FC<ServiceCardProps> = ({
	id,
	title,
	description,
	imageUrl,
}) => {
	return (
		<div
			className={`relative overflow-hidden bg-gray-800 rounded-lg group transition-all duration-300 hover:shadow-[0_0_15px_rgba(220,38,38,0.3)] h-[300px] md:h-[400px]`}
		>
			{/* Background image with overlay */}
			<div
				className='absolute inset-0 bg-cover bg-center transition-transform duration-500 group-hover:scale-110'
				style={{ backgroundImage: `url(${imageUrl})` }}
			/>
			<div className='absolute inset-0 bg-gradient-to-t from-black via-black/70 to-transparent opacity-80 group-hover:opacity-90 transition-opacity duration-300'></div>

			{/* Content */}
			<div className='relative h-full flex flex-col justify-end p-6 z-10'>
				<h3 className='text-2xl md:text-3xl font-bold text-white mb-3 group-hover:text-red-500 transition-colors duration-300'>
					{title}
				</h3>
				<p className='text-gray-300 mb-6 max-w-md text-lg'>
					{description}
				</p>
				<Link
					to={`/services/${id}`}
					className='inline-flex items-center text-white bg-red-600 hover:bg-red-700 py-2 px-4 rounded-md transition-colors duration-300 w-fit'
				>
					Подробнее
					<ArrowRight size={18} className='ml-2' />
				</Link>
			</div>
		</div>
	);
};

export default ServiceCard;

```

## src/components/ServicesSection.tsx

```tsx
import React from 'react';
import ServiceCard from './ServiceCard';
import { TransformedService } from '../types/api';
import { useAuth } from '../auth/useAuth';
import { Link } from 'react-router-dom';
import { PlusCircle } from 'lucide-react';

interface ServicesSectionProps {
	services: TransformedService[];
}

const ServicesSection: React.FC<ServicesSectionProps> = ({ services }) => {
	const { isLoggedIn } = useAuth();
	// Сокращаем описание для карточек
	const getShortDescription = (description: string) => {
		if (description.length > 120) {
			return description.substring(0, 120) + '...';
		}
		return description;
	};

	return (
		<section id='services' className='py-20 bg-gray-900'>
			<div className='container mx-auto px-4'>
				<div className='text-center mb-12 relative'>
					<h2 className='text-3xl md:text-4xl font-bold text-white mb-4'>
						Наши услуги
					</h2>
					{isLoggedIn && (
						<Link
							to='/admin/services/new'
							className='absolute top-0 right-0 -mt-2 bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-md transition-colors flex items-center gap-2'
						>
							<PlusCircle size={20} />
							Создать
						</Link>
					)}
					<p className='text-gray-400 max-w-2xl mx-auto'>
						Мы предлагаем полный спектр услуг по ремонту и обслуживанию
						автомобилей любых марок
					</p>
				</div>

				<div className='grid grid-cols-1 md:grid-cols-2 gap-6'>
					{services.map((service, index) => (
						<ServiceCard
							key={service.id}
							id={service.id}
							title={service.title}
							description={getShortDescription(service.description)}
							imageUrl={service.imageUrl}
							index={index}
						/>
					))}
				</div>
			</div>
		</section>
	);
};

export default ServicesSection;

```

## src/components/admin/AdminHeader.tsx

```tsx
import React from 'react';
import { NavLink, Link, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../auth/useAuth';
import {
	Settings,
	Car,
	Wrench,
	GalleryHorizontal,
	LogOut,
	Home,
} from 'lucide-react';

const AdminHeader = () => {
	const { logout } = useAuth();
	const navigate = useNavigate();
	const location = useLocation();

	const handleLogout = () => {
		logout();
		navigate('/');
	};

	const getLinkClass = (path: string) => {
		const baseClass =
			'flex items-center px-3 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-md transition-colors';
		const activeClass = 'bg-red-600 text-white';

		// Проверяем, начинается ли текущий путь с пути ссылки
		if (location.pathname.startsWith(path)) {
			return `${baseClass} ${activeClass}`;
		}
		return baseClass;
	};

	return (
		<header className='bg-gray-800 text-white shadow-md sticky top-0 z-50'>
			<div className='container mx-auto px-4'>
				<div className='flex justify-between items-center py-3'>
					<Link
						to='/admin/settings'
						className='text-xl font-bold text-white'
					>
						Админ-панель
					</Link>
					<nav className='flex items-center space-x-2 md:space-x-4'>
						<NavLink
							to='/admin/settings'
							className={({ isActive }) =>
								`flex items-center px-3 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-md transition-colors ${
									isActive ? 'bg-red-600 text-white' : ''
								}`
							}
						>
							<Settings size={18} className='mr-2' />
							<span className='hidden md:inline'>Настройки</span>
						</NavLink>
						{/* Ссылки теперь ведут на страницы списков */}
						<Link to='/admin/cars' className={getLinkClass('/admin/cars')}>
							<Car size={18} className='mr-2' />
							<span className='hidden md:inline'>Авто</span>
						</Link>
						<Link
							to='/admin/services'
							className={getLinkClass('/admin/services')}
						>
							<Wrench size={18} className='mr-2' />
							<span className='hidden md:inline'>Услуги</span>
						</Link>
						<Link
							to='/admin/work-examples'
							className={getLinkClass('/admin/work-examples')}
						>
							<GalleryHorizontal size={18} className='mr-2' />
							<span className='hidden md:inline'>Работы</span>
						</Link>
						<div className='border-l border-gray-600 h-8 mx-2'></div>
						<a
							href='/'
							target='_blank'
							rel='noopener noreferrer'
							className='flex items-center px-3 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-md transition-colors'
							title='Открыть сайт'
						>
							<Home size={18} />
						</a>
						<button
							onClick={handleLogout}
							className='flex items-center px-3 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-md transition-colors'
							title='Выйти'
						>
							<LogOut size={18} />
						</button>
					</nav>
				</div>
			</div>
		</header>
	);
};

export default AdminHeader;

```

## src/components/admin/ImageManagerModal.tsx

```tsx
import React, { useState, useRef, useEffect } from 'react';
import { X, Plus, Trash2, Image, Images } from 'lucide-react';
import {
	ImageFilePayload,
	ManagedImagePayload,
	ExistingImagePayload,
} from '../../types/api';

interface ImageManagerModalProps {
	isOpen: boolean;
	onClose: () => void;
	onSave: (images: ManagedImagePayload[]) => void;
	initialImages: ManagedImagePayload[];
}

const ImageManagerModal: React.FC<ImageManagerModalProps> = ({
	isOpen,
	onClose,
	onSave,
	initialImages,
}) => {
	const [images, setImages] =
		useState<ManagedImagePayload[]>(initialImages);
	const [newImageType, setNewImageType] = useState<
		'single' | 'beforeAfter'
	>('single');
	const [newImageDesc, setNewImageDesc] = useState('');

	// Refs для файловых инпутов
	const singleFileRef = useRef<HTMLInputElement>(null);
	const beforeFileRef = useRef<HTMLInputElement>(null);
	const afterFileRef = useRef<HTMLInputElement>(null);

	// Обновляем состояние, если initialImages изменились
	useEffect(() => {
		setImages(initialImages);
	}, [initialImages]);

	// Очищаем превью URL при размонтировании
	useEffect(() => {
		return () => {
			images.forEach((img) => {
				// Очищаем только для новых файлов, т.к. для существующих это полный URL
				if (!('id' in img)) {
					if (img.type === 'SINGLE') {
						URL.revokeObjectURL(img.previewUrl);
					} else {
						URL.revokeObjectURL(img.previewUrlBefore);
						URL.revokeObjectURL(img.previewUrlAfter);
					}
				}
			});
		};
	}, [images]);

	if (!isOpen) return null;

	const resetForm = () => {
		setNewImageDesc('');
		if (singleFileRef.current) singleFileRef.current.value = '';
		if (beforeFileRef.current) beforeFileRef.current.value = '';
		if (afterFileRef.current) afterFileRef.current.value = '';
	};

	const handleAddImage = () => {
		let newImage: ImageFilePayload | null = null;
		const key = `${Date.now()}-${Math.random()}`;

		if (newImageType === 'single' && singleFileRef.current?.files?.[0]) {
			const file = singleFileRef.current.files[0];
			newImage = {
				key,
				type: 'SINGLE',
				file,
				description: newImageDesc || file.name,
				previewUrl: URL.createObjectURL(file),
			};
		} else if (
			newImageType === 'beforeAfter' &&
			beforeFileRef.current?.files?.[0] &&
			afterFileRef.current?.files?.[0]
		) {
			const fileBefore = beforeFileRef.current.files[0];
			const fileAfter = afterFileRef.current.files[0];
			newImage = {
				key,
				type: 'BEFORE_AFTER',
				fileBefore,
				fileAfter,
				description: newImageDesc || 'Сравнение До/После',
				previewUrlBefore: URL.createObjectURL(fileBefore),
				previewUrlAfter: URL.createObjectURL(fileAfter),
			};
		}

		if (newImage) {
			setImages([...images, newImage]);
			resetForm();
		} else {
			alert(
				'Пожалуйста, выберите файл(ы) для добавления нового изображения.'
			);
		}
	};

	const handleRemoveImage = (key: string) => {
		const imageToRemove = images.find((img) => img.key === key);
		if (imageToRemove && !('id' in imageToRemove)) {
			// Очищаем URL только для новых файлов
			if (imageToRemove.type === 'SINGLE') {
				URL.revokeObjectURL(imageToRemove.previewUrl);
			} else {
				URL.revokeObjectURL(imageToRemove.previewUrlBefore);
				URL.revokeObjectURL(imageToRemove.previewUrlAfter);
			}
		}
		setImages(images.filter((img) => img.key !== key));
	};

	const handleSave = () => {
		onSave(images);
		onClose();
	};

	const getPreviewUrls = (
		img: ManagedImagePayload
	): {
		single?: string;
		before?: string;
		after?: string;
	} => {
		if ('id' in img) {
			// ExistingImagePayload
			return {
				single: img.previewUrl,
				before: img.previewUrlBefore,
				after: img.previewUrlAfter,
			};
		}
		// ImageFilePayload
		if (img.type === 'SINGLE') {
			return { single: img.previewUrl };
		}
		return { before: img.previewUrlBefore, after: img.previewUrlAfter };
	};

	return (
		<div
			className='fixed inset-0 bg-black/80 z-[100] flex items-center justify-center p-4'
			onClick={onClose}
		>
			<div
				className='bg-gray-800 rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] flex flex-col'
				onClick={(e) => e.stopPropagation()}
			>
				<div className='flex justify-between items-center p-4 border-b border-gray-700'>
					<h2 className='text-xl font-bold text-white'>
						Менеджер изображений
					</h2>
					<button
						onClick={onClose}
						className='text-gray-400 hover:text-white'
					>
						<X size={24} />
					</button>
				</div>

				<div className='flex-grow p-4 overflow-y-auto'>
					{/* Форма добавления осталась без изменений */}
					<div className='bg-gray-700 p-4 rounded-lg mb-6'>
						<h3 className='font-semibold text-lg mb-3'>
							Добавить новое изображение
						</h3>
						<div className='mb-4'>
							<label className='block text-sm font-medium text-gray-300 mb-2'>
								Тип изображения
							</label>
							<div className='flex gap-4'>
								<button
									onClick={() => setNewImageType('single')}
									className={`flex-1 py-2 px-4 rounded flex items-center justify-center gap-2 ${
										newImageType === 'single'
											? 'bg-red-600 text-white'
											: 'bg-gray-600 hover:bg-gray-500'
									}`}
								>
									<Image size={16} /> Одиночное
								</button>
								<button
									onClick={() => setNewImageType('beforeAfter')}
									className={`flex-1 py-2 px-4 rounded flex items-center justify-center gap-2 ${
										newImageType === 'beforeAfter'
											? 'bg-red-600 text-white'
											: 'bg-gray-600 hover:bg-gray-500'
									}`}
								>
									<Images size={16} /> До/После
								</button>
							</div>
						</div>
						{newImageType === 'single' ? (
							<div className='mb-4'>
								<label
									htmlFor='singleFile'
									className='block text-sm font-medium text-gray-300 mb-1'
								>
									Файл изображения
								</label>
								<input
									id='singleFile'
									type='file'
									ref={singleFileRef}
									accept='image/*'
									className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 text-gray-300 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-red-50 file:text-red-700 hover:file:bg-red-100'
								/>
							</div>
						) : (
							<div className='grid grid-cols-1 md:grid-cols-2 gap-4 mb-4'>
								<div>
									<label
										htmlFor='beforeFile'
										className='block text-sm font-medium text-gray-300 mb-1'
									>
										Файл "До"
									</label>
									<input
										id='beforeFile'
										type='file'
										ref={beforeFileRef}
										accept='image/*'
										className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 text-gray-300 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-red-50 file:text-red-700 hover:file:bg-red-100'
									/>
								</div>
								<div>
									<label
										htmlFor='afterFile'
										className='block text-sm font-medium text-gray-300 mb-1'
									>
										Файл "После"
									</label>
									<input
										id='afterFile'
										type='file'
										ref={afterFileRef}
										accept='image/*'
										className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 text-gray-300 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-red-50 file:text-red-700 hover:file:bg-red-100'
									/>
								</div>
							</div>
						)}
						<div className='mb-4'>
							<label
								htmlFor='imgDesc'
								className='block text-sm font-medium text-gray-300 mb-1'
							>
								Описание (необязательно)
							</label>
							<input
								id='imgDesc'
								type='text'
								value={newImageDesc}
								onChange={(e) => setNewImageDesc(e.target.value)}
								className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
								placeholder='Например, "Полировка капота"'
							/>
						</div>
						<button
							onClick={handleAddImage}
							className='w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-md flex items-center justify-center gap-2'
						>
							<Plus size={20} /> Добавить
						</button>
					</div>

					<div className='space-y-3'>
						{images.length === 0 ? (
							<p className='text-center text-gray-400 py-4'>
								Изображения не добавлены.
							</p>
						) : (
							images.map((img) => {
								const previews = getPreviewUrls(img);
								const isNew = !('id' in img);

								return (
									<div
										key={img.key}
										className={`p-3 rounded-lg flex items-center justify-between gap-4 ${
											isNew ? 'bg-green-900/50' : 'bg-gray-700'
										}`}
									>
										<div className='flex-shrink-0'>
											{img.type === 'SINGLE' ? (
												<img
													src={previews.single}
													alt={img.description}
													className='w-16 h-16 object-cover rounded bg-gray-800'
												/>
											) : (
												<div className='flex gap-1'>
													<img
														src={previews.before}
														alt={`До - ${img.description}`}
														className='w-12 h-12 object-cover rounded bg-gray-800'
													/>
													<img
														src={previews.after}
														alt={`После - ${img.description}`}
														className='w-12 h-12 object-cover rounded bg-gray-800'
													/>
												</div>
											)}
										</div>
										<div className='flex-grow min-w-0'>
											<p
												className='font-semibold truncate'
												title={img.description}
											>
												{img.description}
											</p>
											<p className='text-xs text-gray-400'>
												{img.type === 'SINGLE' ? 'Одиночное' : 'До/После'}{' '}
												-{' '}
												<span
													className={
														isNew ? 'text-green-400' : 'text-blue-400'
													}
												>
													{isNew ? 'Новое' : 'Сохраненное'}
												</span>
											</p>
										</div>
										<button
											onClick={() => handleRemoveImage(img.key)}
											className='text-gray-400 hover:text-red-500 p-2'
										>
											<Trash2 size={20} />
										</button>
									</div>
								);
							})
						)}
					</div>
				</div>

				<div className='flex justify-end p-4 border-t border-gray-700'>
					<button
						onClick={onClose}
						className='bg-gray-600 hover:bg-gray-500 text-white font-semibold py-2 px-4 rounded-md mr-2'
					>
						Отмена
					</button>
					<button
						onClick={handleSave}
						className='bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-md'
					>
						Сохранить и закрыть
					</button>
				</div>
			</div>
		</div>
	);
};

export default ImageManagerModal;

```

## src/components/admin/ImagePreviewGrid.tsx

```tsx
import React from 'react';
import { ImagePlus, Trash2 } from 'lucide-react';
import { ManagedImagePayload } from '../../types/api';

interface ImagePreviewGridProps {
	images: ManagedImagePayload[];
	onManageClick: () => void;
	onRemoveClick: (key: string) => void;
}

const ImagePreviewGrid: React.FC<ImagePreviewGridProps> = ({
	images,
	onManageClick,
	onRemoveClick,
}) => {
	const getPreviewUrls = (
		img: ManagedImagePayload
	): { single?: string; before?: string; after?: string } => {
		if ('id' in img) {
			// ExistingImagePayload
			return {
				single: img.previewUrl,
				before: img.previewUrlBefore,
				after: img.previewUrlAfter,
			};
		}
		// ImageFilePayload
		if (img.type === 'SINGLE') {
			return { single: img.previewUrl };
		}
		return { before: img.previewUrlBefore, after: img.previewUrlAfter };
	};

	return (
		<div>
			<div className='flex justify-between items-center mb-2'>
				<label className='block text-sm font-medium text-gray-300'>
					Изображения ({images.length} шт.)
				</label>
				<button
					type='button'
					onClick={onManageClick}
					className='flex items-center text-sm bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-3 rounded-md'
				>
					<ImagePlus size={16} className='mr-2' />
					Добавить / Управлять
				</button>
			</div>

			{images.length === 0 ? (
				<div className='text-center py-6 bg-gray-900 border-2 border-dashed border-gray-600 rounded-lg'>
					<p className='text-gray-400'>Нет изображений.</p>
					<p className='text-xs text-gray-500'>
						Нажмите "Добавить", чтобы загрузить.
					</p>
				</div>
			) : (
				<div className='grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 p-4 bg-gray-900 rounded-lg border border-gray-700'>
					{images.map((img) => {
						const previews = getPreviewUrls(img);
						const isNew = !('id' in img);
						const tagText = isNew ? 'Новое' : 'Сохраненное';
						const tagClass = isNew ? 'bg-green-600/80' : 'bg-blue-600/80';

						return (
							<div
								key={img.key}
								className='relative aspect-square group bg-gray-800 rounded-md overflow-hidden'
							>
								{img.type === 'SINGLE' ? (
									<img
										src={previews.single}
										alt={img.description}
										className='w-full h-full object-cover'
									/>
								) : (
									<div className='w-full h-full flex'>
										<img
											src={previews.before}
											alt={`До: ${img.description}`}
											className='w-1/2 h-full object-cover'
										/>
										<img
											src={previews.after}
											alt={`После: ${img.description}`}
											className='w-1/2 h-full object-cover'
										/>
									</div>
								)}

								{/* Overlay с центрированным текстом */}
								<div className='absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity flex flex-col p-2'>
									<div className='flex-grow flex items-center justify-center text-center'>
										<p
											className='text-xs text-white text-balance'
											title={img.description}
										>
											{img.description || 'Без описания'}
										</p>
									</div>
								</div>

								{/* Кнопка удаления, всегда видима при наведении */}
								<button
									type='button'
									onClick={() => onRemoveClick(img.key)}
									className='absolute top-1.5 right-1.5 p-1.5 bg-red-600/80 hover:bg-red-600 rounded-full text-white opacity-0 group-hover:opacity-100 transition-opacity z-10'
									title='Удалить'
								>
									<Trash2 size={14} />
								</button>

								{/* Tag - теперь не виден при наведении */}
								<div
									className={`absolute top-1.5 left-1.5 text-white text-[10px] font-bold px-1.5 py-0.5 rounded-full ${tagClass} group-hover:opacity-0 transition-opacity`}
								>
									{tagText}
								</div>

								{img.type === 'BEFORE_AFTER' && (
									<div className='absolute bottom-1.5 left-1.5 text-white text-[10px] font-bold px-1.5 py-0.5 rounded-full bg-gray-700/80 group-hover:opacity-0 transition-opacity'>
										До/После
									</div>
								)}
							</div>
						);
					})}
				</div>
			)}
		</div>
	);
};

export default ImagePreviewGrid;

```

## src/img/img_1.webp

```webp
[Binary file content not included]
```

## src/img/img_2.png

```png
[File too large: 1.1 MB > 1.0 MB]
```

## src/index.css

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

```

## src/lib/utils.ts

```typescript
// src/lib/utils.ts

/**
 * Форматирует номер телефона для отображения.
 * Пример: +7 (965) 511-85-85
 * @param phone - Номер телефона в строковом формате.
 * @returns Отформатированный номер телефона или исходная строка, если форматирование невозможно.
 */
export const formatDisplayPhoneNumber = (
	phone: string | undefined | null
): string => {
	if (!phone) return '';

	// Удаляем все нецифровые символы, кроме начального '+'
	let cleaned = phone.replace(/[^\d+]/g, '');

	// Если номер начинается с '8' и имеет 11 цифр (российский формат без +), заменяем '8' на '+7'
	if (cleaned.startsWith('8') && cleaned.length === 11) {
		cleaned = '+7' + cleaned.substring(1);
	}
	// Если номер начинается с '7' (без +) и имеет 11 цифр, добавляем '+'
	else if (
		cleaned.startsWith('7') &&
		cleaned.length === 11 &&
		!cleaned.startsWith('+')
	) {
		cleaned = '+' + cleaned;
	}
	// Если номер состоит из 10 цифр (без кода страны), предполагаем, что это российский номер и добавляем '+7'
	else if (cleaned.length === 10 && /^\d+$/.test(cleaned)) {
		cleaned = '+7' + cleaned;
	}

	// Применяем маску +X (XXX) XXX-XX-XX или +XX (XXX) XXX-XX-XX и т.д.
	const match = cleaned.match(/^(\+\d{1,3})(\d{3})(\d{3})(\d{2})(\d{2})$/);

	if (match) {
		return `${match[1]} (${match[2]}) ${match[3]}-${match[4]}-${match[5]}`;
	}

	// Если не подошло под основную маску, возвращаем "очищенный" или исходный номер
	return cleaned || phone;
};

/**
 * Форматирует номер телефона для использования в ссылке tel:
 * Пример: +79655118585
 * @param phone - Номер телефона в строковом формате.
 * @returns Номер телефона, пригодный для tel: ссылок.
 */
export const formatPhoneNumberForTelLink = (
	phone: string | undefined | null
): string => {
	if (!phone) return '';
	let cleaned = phone.replace(/[^\d+]/g, ''); // Оставляем только цифры и +

	// Если номер начинается с '8' и имеет 11 цифр, заменяем '8' на '+7'
	if (cleaned.startsWith('8') && cleaned.length === 11) {
		cleaned = '+7' + cleaned.substring(1);
	}
	// Если номер начинается с '7' (без +) и имеет 11 цифр, добавляем '+'
	else if (
		cleaned.startsWith('7') &&
		cleaned.length === 11 &&
		!cleaned.startsWith('+')
	) {
		cleaned = '+' + cleaned;
	}
	// Если номер состоит из 10 цифр (без кода страны), предполагаем, что это российский номер и добавляем '+7'
	else if (cleaned.length === 10 && /^\d+$/.test(cleaned)) {
		cleaned = '+7' + cleaned;
	}
	// Убедимся что номер начинается с + если это не так и он достаточно длинный
	else if (!cleaned.startsWith('+') && cleaned.length >= 10) {
		cleaned = '+' + cleaned;
	}
	return cleaned;
};

```

## src/main.tsx

```tsx
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import { createBrowserRouter, RouterProvider } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { AuthProvider } from './auth/useAuth';

// Public Pages & Components
import App from './App';
import Home from './pages/Home';
import ServicePage from './pages/ServicePage';
import Gallery from './pages/Gallery';
import WorkExamplePage from './pages/WorkExamplePage';
import CarPage from './pages/CarPage';

// Admin Pages & Components
import ProtectedRoute from './pages/admin/ProtectedRoute';
import AdminLayout from './pages/admin/AdminLayout';
import LoginPage from './pages/admin/LoginPage';
import SettingsEditPage from './pages/admin/SettingsEditPage';
// List Pages
import CarListPage from './pages/admin/CarListPage';
import ServiceListPage from './pages/admin/ServiceListPage';
import WorkExampleListPage from './pages/admin/WorkExampleListPage';
// Create Pages
import CarCreatePage from './pages/admin/CarCreatePage';
import ServiceCreatePage from './pages/admin/ServiceCreatePage';
import WorkExampleCreatePage from './pages/admin/WorkExampleCreatePage';
// Edit Pages
import CarEditPage from './pages/admin/CarEditPage';
import ServiceEditPage from './pages/admin/ServiceEditPage';
import WorkExampleEditPage from './pages/admin/WorkExampleEditPage';

import './index.css';

const queryClient = new QueryClient();

const router = createBrowserRouter([
	// Public Routes
	{
		path: '/',
		element: <App />,
		children: [
			{ index: true, element: <Home /> },
			{ path: 'gallery', element: <Gallery /> },
			{
				path: 'work-examples/:workExampleId',
				element: <WorkExamplePage />,
			},
			{ path: 'services/:serviceId', element: <ServicePage /> },
			{ path: 'cars/:carId', element: <CarPage /> },
		],
	},
	// Admin Routes
	{
		path: '/admin',
		element: (
			<ProtectedRoute>
				<AdminLayout />
			</ProtectedRoute>
		),
		children: [
			{ path: 'settings', element: <SettingsEditPage /> },
			// Car routes
			{ path: 'cars', element: <CarListPage /> },
			{ path: 'cars/new', element: <CarCreatePage /> },
			{ path: 'cars/:carId/edit', element: <CarEditPage /> },
			// Service routes
			{ path: 'services', element: <ServiceListPage /> },
			{ path: 'services/new', element: <ServiceCreatePage /> },
			{ path: 'services/:serviceId/edit', element: <ServiceEditPage /> },
			// Work Example routes
			{ path: 'work-examples', element: <WorkExampleListPage /> },
			{ path: 'work-examples/new', element: <WorkExampleCreatePage /> },
			{
				path: 'work-examples/:workExampleId/edit',
				element: <WorkExampleEditPage />,
			},
		],
	},
	{
		path: '/admin/login',
		element: <LoginPage />,
	},
]);

createRoot(document.getElementById('root')!).render(
	<StrictMode>
		<QueryClientProvider client={queryClient}>
			<AuthProvider>
				<RouterProvider router={router} />
			</AuthProvider>
		</QueryClientProvider>
	</StrictMode>
);

```

## src/pages/CarPage.tsx

```tsx
import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate, useParams, Link } from 'react-router-dom';
import {
	ArrowLeft,
	PhoneCall,
	MessageCircle,
	ChevronLeft,
	ChevronRight,
	Edit,
} from 'lucide-react';
import { useQuery } from '@tanstack/react-query';
import { fetchCarById, fetchSettings } from '../services/apiService';
import { RestApiCar, SiteSettings, GalleryItem } from '../types/api';
import MarkdownRenderer from '../components/MarkdownRenderer';
import Contact from '../components/Contact';
import Loader from '../components/Loader';
import { useAuth } from '../auth/useAuth';

// Вспомогательная функция для трансформации данных, перенесена сюда из apiService
const transformCarData = (
	car: RestApiCar
): {
	title: string;
	cost: string;
	description: string;
	images: GalleryItem[];
} => {
	const transformImage = (image: any): GalleryItem => {
		const baseItem = {
			id: image.id,
			title: image.description || 'Изображение',
			description: image.description || '',
		};
		if (image.type === 'BEFORE_AFTER') {
			return {
				...baseItem,
				type: 'beforeAfter',
				beforeImage: image.urlBefore,
				afterImage: image.urlAfter,
			};
		}
		return {
			...baseItem,
			type: 'single',
			imageUrl: image.urlSingle,
		};
	};

	return {
		title: car.name,
		cost: new Intl.NumberFormat('ru-RU', {
			style: 'currency',
			currency: 'RUB',
			minimumFractionDigits: 0,
		}).format(car.price),
		description: car.description,
		images: car.images.map(transformImage),
	};
};

const CarPage: React.FC = () => {
	const navigate = useNavigate();
	const { carId } = useParams<{ carId: string }>();
	const { isLoggedIn } = useAuth();

	const {
		data: rawCar,
		isLoading: isLoadingCar,
		error: errorCar,
	} = useQuery<RestApiCar | null>({
		queryKey: ['carData', carId],
		queryFn: () => {
			if (!carId) return Promise.resolve(null);
			return fetchCarById(carId);
		},
		enabled: !!carId,
	});

	const { data: settings, isLoading: isLoadingSettings } =
		useQuery<SiteSettings | null>({
			queryKey: ['siteSettings'],
			queryFn: fetchSettings,
		});

	const [currentImageIndex, setCurrentImageIndex] = useState<number>(0);

	useEffect(() => {
		setCurrentImageIndex(0);
	}, [carId]);

	if (isLoadingCar && !rawCar) {
		return (
			<div className='min-h-screen bg-gray-900 text-white flex justify-center items-center pt-24 md:pt-32'>
				<Loader size='xl' text='Загрузка информации об автомобиле...' />
			</div>
		);
	}

	if (errorCar || (!isLoadingCar && !rawCar)) {
		return (
			<div className='min-h-screen flex flex-col items-center justify-center bg-gray-900 pt-24 md:pt-32 text-center px-4'>
				<h2 className='text-3xl font-bold text-white mb-4'>
					{errorCar ? 'Ошибка загрузки' : 'Автомобиль не найден'}
				</h2>
				<p className='text-gray-300 mb-6'>
					{errorCar
						? 'Не удалось загрузить данные. Пожалуйста, попробуйте позже.'
						: 'Запрошенный автомобиль не существует или был удален.'}
				</p>
				<button
					onClick={() => navigate('/')}
					className='bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-6 rounded-md transition-colors'
				>
					Вернуться на главную
				</button>
			</div>
		);
	}

	if (!rawCar) {
		return null;
	}

	const car = transformCarData(rawCar);

	const mainImage =
		car.images[currentImageIndex]?.type === 'single'
			? (car.images[currentImageIndex] as any).imageUrl
			: '';
	const totalImages = car.images?.length || 0;

	const goToNextImage = useCallback(() => {
		if (totalImages > 0) {
			setCurrentImageIndex((prevIndex) => (prevIndex + 1) % totalImages);
		}
	}, [totalImages]);

	const goToPrevImage = useCallback(() => {
		if (totalImages > 0) {
			setCurrentImageIndex(
				(prevIndex) => (prevIndex - 1 + totalImages) % totalImages
			);
		}
	}, [totalImages]);

	useEffect(() => {
		const handleKeyDown = (event: KeyboardEvent) => {
			if (totalImages <= 1) return;
			if (event.key === 'ArrowRight') goToNextImage();
			else if (event.key === 'ArrowLeft') goToPrevImage();
		};
		window.addEventListener('keydown', handleKeyDown);
		return () => window.removeEventListener('keydown', handleKeyDown);
	}, [totalImages, goToNextImage, goToPrevImage]);

	const handleThumbnailClick = (index: number) => {
		setCurrentImageIndex(index);
	};

	const phoneLink = settings?.phoneLink || '#';
	const whatsappLink = settings?.whatsappLink || '#';

	return (
		<div className='pt-16 md:pt-24 bg-gray-900 text-white'>
			<div className='container mx-auto px-4 py-12 md:py-16'>
				<div className='flex justify-between items-center mb-8'>
					<button
						onClick={() => navigate(-1)}
						className='flex items-center text-gray-300 hover:text-red-500 transition-colors'
					>
						<ArrowLeft size={20} className='mr-2' />
						Назад
					</button>
					{isLoggedIn && (
						<Link
							to={`/admin/cars/${carId}/edit`}
							className='flex items-center bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-md transition-colors'
						>
							<Edit size={16} className='mr-2' />
							Редактировать
						</Link>
					)}
				</div>

				<div className='grid grid-cols-1 lg:grid-cols-5 gap-8 md:gap-12'>
					<div className='lg:col-span-3'>
						<div className='relative aspect-w-16 aspect-h-10 md:aspect-h-9 bg-gray-800 rounded-lg overflow-hidden shadow-xl mb-4'>
							{mainImage ? (
								<img
									src={mainImage}
									alt={`${car.title} - изображение ${
										currentImageIndex + 1
									}`}
									className='w-full h-full object-contain'
								/>
							) : (
								<div className='w-full h-full flex items-center justify-center text-gray-500'>
									{totalImages > 0 ? (
										<Loader size='md' text='Загрузка изображения...' />
									) : (
										'Нет изображений'
									)}
								</div>
							)}

							{totalImages > 1 && (
								<>
									<button
										onClick={goToPrevImage}
										className='absolute top-1/2 left-2 md:left-4 transform -translate-y-1/2 bg-black/40 hover:bg-black/70 text-white p-2 rounded-full transition-colors z-10'
										aria-label='Предыдущее изображение'
									>
										<ChevronLeft size={28} />
									</button>
									<button
										onClick={goToNextImage}
										className='absolute top-1/2 right-2 md:right-4 transform -translate-y-1/2 bg-black/40 hover:bg-black/70 text-white p-2 rounded-full transition-colors z-10'
										aria-label='Следующее изображение'
									>
										<ChevronRight size={28} />
									</button>
								</>
							)}
						</div>
						{totalImages > 1 && (
							<div className='grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 gap-3'>
								{car.images.map((image, index) =>
									image.type === 'single' ? (
										<button
											key={image.id}
											onClick={() => handleThumbnailClick(index)}
											className={`aspect-w-1 aspect-h-1 bg-gray-800 rounded overflow-hidden cursor-pointer transition-opacity hover:opacity-80
                      ${
												index === currentImageIndex
													? 'ring-2 ring-red-500 opacity-100'
													: 'opacity-60'
											}`}
											aria-label={`Показать изображение ${index + 1}`}
										>
											<img
												src={(image as any).imageUrl}
												alt={`${car.title} - миниатюра ${index + 1}`}
												className='w-full h-full object-cover'
											/>
										</button>
									) : null
								)}
							</div>
						)}
					</div>

					<div className='lg:col-span-2'>
						<h1 className='text-3xl md:text-4xl font-bold text-white mb-3'>
							{car.title}
						</h1>
						<p className='text-3xl md:text-4xl font-bold text-red-500 mb-6'>
							{car.cost}
						</p>

						{isLoadingSettings && !settings ? (
							<div className='space-y-4 mb-8'>
								<div className='w-full flex items-center justify-center bg-red-600 text-white font-semibold py-3 px-6 rounded-md opacity-70 h-[48px]'>
									<Loader
										size='xs'
										spinnerClassName='border-white border-t-transparent'
									/>
								</div>
								<div className='w-full flex items-center justify-center bg-green-600 text-white font-semibold py-3 px-6 rounded-md opacity-70 h-[48px]'>
									<Loader
										size='xs'
										spinnerClassName='border-white border-t-transparent'
									/>
								</div>
							</div>
						) : (
							<div className='space-y-4 mb-8'>
								<a
									href={phoneLink}
									className='w-full flex items-center justify-center bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-6 rounded-md transition-colors duration-300 h-[48px]'
								>
									<PhoneCall size={20} className='mr-2' />
									Позвонить
								</a>
								<a
									href={whatsappLink}
									target='_blank'
									rel='noopener noreferrer'
									className='w-full flex items-center justify-center bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-md transition-colors duration-300 h-[48px]'
								>
									<MessageCircle size={20} className='mr-2' />
									Написать в WhatsApp
								</a>
							</div>
						)}

						<h2 className='text-2xl font-semibold text-white mb-3'>
							Описание
						</h2>
						{car.description ? (
							<MarkdownRenderer
								content={car.description}
								className='text-lg'
							/>
						) : (
							<p className='text-gray-300'>
								Подробное описание отсутствует.
							</p>
						)}
					</div>
				</div>
			</div>
			<Contact />
		</div>
	);
};

export default CarPage;

```

## src/pages/Gallery.tsx

```tsx
import { Link, useNavigate } from 'react-router-dom';
import { ArrowLeft, PlusCircle } from 'lucide-react';
import { useQuery } from '@tanstack/react-query';
import { fetchWorkExamples } from '../services/apiService';
import { TransformedWorkExamplePreview } from '../types/api';
import ImageCompare from '../components/ImageCompare';
import Loader from '../components/Loader';
import { useAuth } from '../auth/useAuth';

const Gallery = () => {
	const navigate = useNavigate();
	const { isLoggedIn } = useAuth();
	const {
		data: workExamples,
		isLoading,
		error,
	} = useQuery<TransformedWorkExamplePreview[]>({
		queryKey: ['workExamples'],
		queryFn: fetchWorkExamples,
	});

	if (isLoading && !workExamples) {
		return (
			<div className='pt-24 md:pt-32 bg-gray-900 min-h-screen text-white flex justify-center items-center'>
				<Loader size='xl' text='Загрузка галереи работ...' />
			</div>
		);
	}

	if (error && !workExamples) {
		return (
			<div className='pt-24 md:pt-32 bg-gray-900 min-h-screen text-red-500 flex flex-col justify-center items-center px-4 text-center'>
				<h2 className='text-2xl font-bold mb-4'>
					Ошибка загрузки галереи работ.
				</h2>
				<p className='text-gray-300 mb-6'>
					Пожалуйста, попробуйте обновить страницу или зайдите позже.
				</p>
				<button
					onClick={() => navigate('/')}
					className='bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-6 rounded-md transition-colors'
				>
					На главную
				</button>
			</div>
		);
	}

	return (
		<div className='pt-24 md:pt-32 bg-gray-900 min-h-screen'>
			<div className='container mx-auto px-4 py-16'>
				<button
					onClick={() => navigate('/')}
					className='mb-8 flex items-center text-gray-300 hover:text-red-500 transition-colors'
				>
					<ArrowLeft size={20} className='mr-2' />
					Назад на главную
				</button>

				<div className='relative'>
					<h1 className='text-4xl font-bold text-white mb-6'>
						Галерея наших работ
					</h1>
					{isLoggedIn && (
						<Link
							to='/admin/work-examples/new'
							className='absolute top-0 right-0 bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-md transition-colors flex items-center gap-2'
						>
							<PlusCircle size={20} />
							Создать
						</Link>
					)}
				</div>
				<p className='text-gray-300 mb-12 max-w-3xl'>
					Здесь вы можете увидеть примеры наших работ. Кликните на любую
					карточку, чтобы посмотреть все фотографии этого проекта.
				</p>

				{(!workExamples || workExamples.length === 0) && !isLoading && (
					<p className='text-center text-gray-400 py-10 text-lg'>
						Примеров работ пока нет.
					</p>
				)}

				{workExamples && workExamples.length > 0 && (
					<div className='grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-10'>
						{workExamples.map((item) => (
							<div key={item.id} className='group'>
								<Link to={`/work-examples/${item.id}`}>
									<div className='relative overflow-hidden rounded-lg h-[350px] md:h-[400px] mb-3 bg-gray-800 cursor-pointer'>
										{item.previewImage.type === 'single' ? (
											<>
												<img
													src={item.previewImage.imageUrl}
													alt={item.title}
													className='w-full h-full object-cover transition-transform duration-500 group-hover:scale-110'
													loading='lazy'
												/>
												<div className='absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center pointer-events-none'>
													<svg
														xmlns='http://www.w3.org/2000/svg'
														fill='none'
														viewBox='0 0 24 24'
														strokeWidth={1.5}
														stroke='white'
														className='w-12 h-12'
													>
														<path
															strokeLinecap='round'
															strokeLinejoin='round'
															d='m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z'
														/>
													</svg>
												</div>
											</>
										) : (
											<ImageCompare
												beforeImage={item.previewImage.beforeImage}
												afterImage={item.previewImage.afterImage}
												altBefore={`До - ${item.title}`}
												altAfter={`После - ${item.title}`}
											/>
										)}
									</div>
								</Link>
								<div>
									<h4 className='text-lg font-semibold text-white mb-1'>
										<Link
											to={`/work-examples/${item.id}`}
											className='hover:text-red-500'
										>
											{item.title}
										</Link>
										{item.previewImage.type === 'beforeAfter' && (
											<span className='text-sm text-gray-400 ml-2'>
												(До/После)
											</span>
										)}
									</h4>
									<p className='text-gray-300 text-sm'>
										{item.description}
									</p>
								</div>
							</div>
						))}
					</div>
				)}
			</div>
		</div>
	);
};

export default Gallery;

```

## src/pages/Home.tsx

```tsx
import React from 'react';
import Hero from '../components/Hero';
import GalleryPreview from '../components/GalleryPreview';
import Contact from '../components/Contact';
import ServicesSection from '../components/ServicesSection';
import CarsForSaleSection from '../components/CarsForSaleSection';
import { useQuery } from '@tanstack/react-query';
import { fetchServices } from '../services/apiService';
import { TransformedService } from '../types/api';
import Loader from '../components/Loader';

const Home = () => {
	const {
		data: servicesData,
		isLoading: isLoadingServices,
		error: errorServices,
	} = useQuery<TransformedService[]>({
		queryKey: ['services'],
		queryFn: fetchServices,
	});

	// Показываем лоадер, если идет загрузка услуг и данных еще нет
	if (isLoadingServices && !servicesData) {
		return (
			<div className='min-h-screen bg-gray-900 text-white flex justify-center items-center'>
				<Loader size='xl' text='Загрузка данных...' />
			</div>
		);
	}

	if (errorServices && !servicesData) {
		console.error('Ошибка загрузки услуг:', errorServices);
		return (
			<div className='min-h-screen bg-gray-900 text-white flex flex-col justify-center items-center text-center px-4'>
				<h2 className='text-2xl font-bold mb-4'>
					Ошибка загрузки данных.
				</h2>
				<p className='text-gray-300'>
					Пожалуйста, попробуйте обновить страницу или зайдите позже.
				</p>
			</div>
		);
	}

	const actualServices = servicesData || [];

	return (
		<div>
			<Hero />
			{actualServices.length > 0 && (
				<ServicesSection services={actualServices} />
			)}
			<GalleryPreview />
			<CarsForSaleSection />
			<Contact />
		</div>
	);
};

export default Home;

```

## src/pages/ServicePage.tsx

```tsx
import React from 'react';
import { useNavigate, useParams, Link } from 'react-router-dom';
import { ArrowLeft, MessageCircle, PhoneCall, Edit } from 'lucide-react';
import { useQuery } from '@tanstack/react-query';
import { fetchServiceById, fetchSettings } from '../services/apiService';
import { RestApiService, SiteSettings } from '../types/api';
import Contact from '../components/Contact';
import MarkdownRenderer from '../components/MarkdownRenderer';
import Loader from '../components/Loader';
import { useAuth } from '../auth/useAuth';

const ServicePage: React.FC = () => {
	const navigate = useNavigate();
	const { serviceId } = useParams<{ serviceId: string }>();
	const { isLoggedIn } = useAuth();

	const {
		data: service,
		isLoading: isLoadingService,
		error: errorService,
	} = useQuery<RestApiService | null>({
		queryKey: ['service', serviceId],
		queryFn: () => {
			if (!serviceId) return Promise.resolve(null);
			return fetchServiceById(serviceId);
		},
		enabled: !!serviceId,
	});

	const { data: settings, isLoading: isLoadingSettings } =
		useQuery<SiteSettings | null>({
			queryKey: ['siteSettings'],
			queryFn: fetchSettings,
		});

	if (isLoadingService && !service) {
		return (
			<div className='min-h-screen bg-gray-900 text-white flex justify-center items-center pt-24 md:pt-32'>
				<Loader size='xl' text='Загрузка услуги...' />
			</div>
		);
	}

	if (errorService) {
		console.error('Ошибка загрузки услуги:', errorService);
		return (
			<div className='min-h-screen flex flex-col items-center justify-center bg-gray-900 pt-24 md:pt-32 text-center px-4'>
				<h2 className='text-3xl font-bold text-white mb-4'>
					Ошибка загрузки услуги
				</h2>
				<p className='text-gray-300 mb-6'>
					Не удалось загрузить данные об услуге. Пожалуйста, попробуйте
					позже.
				</p>
				<button
					onClick={() => navigate('/')}
					className='bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-6 rounded-md transition-colors'
				>
					Вернуться на главную
				</button>
			</div>
		);
	}

	if (!isLoadingService && !service) {
		return (
			<div className='min-h-screen flex flex-col items-center justify-center bg-gray-900 pt-24 md:pt-32 text-center px-4'>
				<h2 className='text-3xl font-bold text-white mb-4'>
					Услуга не найдена
				</h2>
				<p className='text-gray-300 mb-6'>
					Запрошенная услуга не существует или была удалена.
				</p>
				<button
					onClick={() => navigate('/')}
					className='bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-6 rounded-md transition-colors'
				>
					Вернуться на главную
				</button>
			</div>
		);
	}

	if (!service) {
		return null;
	}

	const phoneLink = settings?.phoneLink || '#';
	const whatsappLink = settings?.whatsappLink || '#';
	const displayAddress = settings?.address || 'Загрузка...';
	const displayWorkingHours = settings?.workingHours || '10:00-22:00';

	const backgroundImageUrl =
		service.images?.[0]?.urlSingle || '/img/img_2.png';

	return (
		<div className='pt-16 md:pt-24 bg-gray-900'>
			<div
				className='relative h-[50vh] flex items-end md:items-center bg-gray-700'
				style={{
					backgroundImage: `url(${backgroundImageUrl})`,
					backgroundPosition: 'center',
					backgroundSize: 'cover',
				}}
			>
				<div className='absolute inset-0 bg-black opacity-70'></div>
				<div className='container mx-auto px-4 relative z-10 pb-8 md:pb-0'>
					<div className='flex justify-between items-start mb-6'>
						<button
							onClick={() => navigate(-1)}
							className='flex items-center text-gray-300 hover:text-red-500 transition-colors'
						>
							<ArrowLeft size={20} className='mr-2' />
							Назад
						</button>
						{isLoggedIn && (
							<Link
								to={`/admin/services/${serviceId}/edit`}
								className='flex items-center bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-md transition-colors'
							>
								<Edit size={16} className='mr-2' />
								Редактировать
							</Link>
						)}
					</div>
					<h1 className='text-4xl md:text-5xl font-bold text-white mb-4'>
						{service.name}
					</h1>
				</div>
			</div>

			<div className='container mx-auto px-4 py-16'>
				<div className='grid grid-cols-1 lg:grid-cols-3 gap-12'>
					<div className='lg:col-span-2'>
						<h2 className='text-3xl font-bold text-white mb-6'>
							Об услуге
						</h2>

						<div className='text-lg mb-8'>
							<MarkdownRenderer content={service.description} />
						</div>
					</div>

					<div className='lg:sticky lg:top-28 self-start'>
						<div className='bg-gray-800 rounded-lg p-6 shadow-lg'>
							<h3 className='text-xl font-semibold text-white mb-4'>
								Свяжитесь с нами
							</h3>
							<p className='text-gray-300 mb-6'>
								Для получения консультации или записи на сервис напишите
								нам в WhatsApp или позвоните.
							</p>
							{isLoadingSettings && !settings ? (
								<div className='space-y-4'>
									<div className='w-full flex items-center justify-center bg-green-600 text-white font-semibold py-3 rounded-md opacity-70 h-[48px]'>
										<Loader
											size='xs'
											spinnerClassName='border-white border-t-transparent'
										/>
									</div>
									<div className='w-full flex items-center justify-center bg-red-600 text-white font-semibold py-3 rounded-md opacity-70 h-[48px]'>
										<Loader
											size='xs'
											spinnerClassName='border-white border-t-transparent'
										/>
									</div>
								</div>
							) : (
								<>
									<a
										href={whatsappLink}
										target='_blank'
										rel='noopener noreferrer'
										className='block w-full bg-green-600 hover:bg-green-700 text-white text-center font-semibold py-3 rounded-md mb-4 transition-colors flex items-center justify-center h-[48px]'
									>
										<MessageCircle className='mr-2' size={20} />
										Написать в WhatsApp
									</a>
									<a
										href={phoneLink}
										className='block w-full bg-red-600 hover:bg-red-700 text-white text-center font-semibold py-3 rounded-md mb-4 transition-colors flex items-center justify-center h-[48px]'
									>
										<PhoneCall className='mr-2' size={20} />
										Позвонить
									</a>
								</>
							)}
							<div className='text-gray-400 text-sm mt-4'>
								<p className='mb-2'>Часы работы: {displayWorkingHours}</p>
								<p>Адрес: {displayAddress}</p>
							</div>
						</div>
					</div>
				</div>
			</div>
			<Contact />
		</div>
	);
};

export default ServicePage;

```

## src/pages/WorkExamplePage.tsx

```tsx
import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate, useParams, Link } from 'react-router-dom';
import { ArrowLeft, X, Edit } from 'lucide-react';
import { useQuery } from '@tanstack/react-query';
import { fetchWorkExampleById } from '../services/apiService';
import {
	RestApiWorkExample,
	GalleryItem,
	RestApiImage,
} from '../types/api';
import ImageCompare from '../components/ImageCompare';
import MarkdownRenderer from '../components/MarkdownRenderer';
import Loader from '../components/Loader';
import { useAuth } from '../auth/useAuth';

// Вспомогательная функция для трансформации данных
const transformWorkExampleData = (
	we: RestApiWorkExample
): {
	id: string;
	title: string;
	description: string;
	galleryItems: GalleryItem[];
} => {
	const transformImage = (image: RestApiImage): GalleryItem => {
		const baseItem = {
			id: image.id,
			title: image.description || 'Изображение',
			description: image.description || '',
		};
		if (image.type === 'BEFORE_AFTER') {
			return {
				...baseItem,
				type: 'beforeAfter',
				beforeImage: image.urlBefore!,
				afterImage: image.urlAfter!,
			};
		}
		return {
			...baseItem,
			type: 'single',
			imageUrl: image.urlSingle!,
		};
	};

	return {
		id: we.id,
		title: we.name,
		description: we.description,
		galleryItems: we.images.map(transformImage),
	};
};

const WorkExamplePage = () => {
	const navigate = useNavigate();
	const { workExampleId } = useParams<{ workExampleId: string }>();
	const { isLoggedIn } = useAuth();

	const {
		data: rawWorkExample,
		isLoading,
		error,
	} = useQuery<RestApiWorkExample | null>({
		queryKey: ['workExampleData', workExampleId],
		queryFn: () => {
			if (!workExampleId) return Promise.resolve(null);
			return fetchWorkExampleById(workExampleId);
		},
		enabled: !!workExampleId,
	});

	const [activeItemIndex, setActiveItemIndex] = useState<number | null>(
		null
	);

	const workExampleData = rawWorkExample
		? transformWorkExampleData(rawWorkExample)
		: null;

	const openModal = (index: number) => {
		if (
			workExampleData &&
			index >= 0 &&
			index < workExampleData.galleryItems.length
		) {
			setActiveItemIndex(index);
			document.body.style.overflow = 'hidden';
		}
	};

	const closeModal = useCallback(() => {
		setActiveItemIndex(null);
		document.body.style.overflow = 'auto';
	}, []);

	const nextItem = useCallback(() => {
		if (activeItemIndex === null || !workExampleData?.galleryItems.length)
			return;
		setActiveItemIndex(
			(prev) => (prev! + 1) % workExampleData.galleryItems.length
		);
	}, [activeItemIndex, workExampleData]);

	const prevItem = useCallback(() => {
		if (activeItemIndex === null || !workExampleData?.galleryItems.length)
			return;
		setActiveItemIndex(
			(prev) =>
				(prev! - 1 + workExampleData.galleryItems.length) %
				workExampleData.galleryItems.length
		);
	}, [activeItemIndex, workExampleData]);

	useEffect(() => {
		const handleKeyDown = (event: KeyboardEvent) => {
			if (activeItemIndex === null) return;
			if (event.key === 'Escape') closeModal();
			else if (event.key === 'ArrowRight') nextItem();
			else if (event.key === 'ArrowLeft') prevItem();
		};
		window.addEventListener('keydown', handleKeyDown);
		return () => window.removeEventListener('keydown', handleKeyDown);
	}, [activeItemIndex, closeModal, nextItem, prevItem]);

	if (isLoading && !workExampleData) {
		return (
			<div className='pt-24 md:pt-32 bg-gray-900 min-h-screen text-white flex justify-center items-center'>
				<Loader size='xl' text='Загрузка проекта...' />
			</div>
		);
	}

	if (error || (!isLoading && !workExampleData)) {
		return (
			<div className='pt-24 md:pt-32 bg-gray-900 min-h-screen flex flex-col justify-center items-center text-center px-4'>
				<h2 className='text-3xl font-bold text-white mb-4'>
					{error ? 'Ошибка загрузки проекта' : 'Проект не найден'}
				</h2>
				<p className='text-gray-300 mb-6'>
					{error
						? 'Не удалось загрузить данные о проекте.'
						: 'Запрошенный проект не существует или был удален.'}
				</p>
				<Link
					to='/gallery'
					className='bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-6 rounded-md'
				>
					Ко всем работам
				</Link>
			</div>
		);
	}

	if (!workExampleData) {
		return null;
	}

	const activeModalItem: GalleryItem | null =
		activeItemIndex !== null
			? workExampleData.galleryItems[activeItemIndex]
			: null;

	const mainPreviewImage = workExampleData.galleryItems.find(
		(i) => i.type === 'single'
	) as GalleryItem | undefined;

	return (
		<div className='pt-24 md:pt-32 bg-gray-900 min-h-screen'>
			<div className='container mx-auto px-4 py-16'>
				<div className='flex justify-between items-center mb-8'>
					<button
						onClick={() => navigate('/gallery')}
						className='flex items-center text-gray-300 hover:text-red-500 transition-colors'
					>
						<ArrowLeft size={20} className='mr-2' />
						Назад к галерее работ
					</button>
					{isLoggedIn && (
						<Link
							to={`/admin/work-examples/${workExampleId}/edit`}
							className='flex items-center bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-md transition-colors'
						>
							<Edit size={16} className='mr-2' />
							Редактировать
						</Link>
					)}
				</div>

				{mainPreviewImage && mainPreviewImage.type === 'single' && (
					<div className='relative h-[40vh] md:h-[50vh] rounded-lg overflow-hidden mb-12 shadow-lg bg-gray-800'>
						<img
							src={(mainPreviewImage as any).imageUrl}
							alt={`Главное изображение для ${workExampleData.title}`}
							className='w-full h-full object-cover'
						/>
						<div className='absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent'></div>
					</div>
				)}

				<h1 className='text-4xl md:text-5xl font-bold text-white mb-4'>
					{workExampleData.title}
				</h1>

				<div className='mb-12'>
					<MarkdownRenderer content={workExampleData.description} />
				</div>

				{workExampleData.galleryItems.length === 0 && (
					<p className='text-center text-gray-400 text-lg py-10'>
						Для этого проекта пока нет изображений в галерее.
					</p>
				)}

				<div className='grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-10'>
					{workExampleData.galleryItems.map((item, index) => (
						<div key={item.id} className='group'>
							<div
								className='relative overflow-hidden rounded-lg h-[300px] md:h-[350px] mb-3 bg-gray-800 cursor-pointer shadow-md hover:shadow-red-500/30 transition-shadow'
								onClick={() => openModal(index)}
							>
								{item.type === 'single' ? (
									<>
										<img
											src={(item as any).imageUrl}
											alt={item.title}
											className='w-full h-full object-cover transition-transform duration-500 group-hover:scale-110'
											loading='lazy'
										/>
										<div className='absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center pointer-events-none'>
											<svg
												xmlns='http://www.w3.org/2000/svg'
												fill='none'
												viewBox='0 0 24 24'
												strokeWidth={1.5}
												stroke='white'
												className='w-12 h-12'
											>
												<path
													strokeLinecap='round'
													strokeLinejoin='round'
													d='m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z'
												/>
											</svg>
										</div>
									</>
								) : (
									<ImageCompare
										beforeImage={(item as any).beforeImage}
										afterImage={(item as any).afterImage}
										altBefore={`До - ${item.title}`}
										altAfter={`После - ${item.title}`}
									/>
								)}
							</div>
							<div>
								<h4
									className='text-lg font-semibold text-white mb-1 truncate'
									title={item.title}
								>
									{item.title}
								</h4>
								{item.type === 'beforeAfter' && (
									<span className='text-sm text-gray-400 ml-0 block mb-1'>
										(Сравнение До/После)
									</span>
								)}
								<p
									className='text-gray-300 text-sm line-clamp-2'
									title={item.description}
								>
									{item.description}
								</p>
							</div>
						</div>
					))}
				</div>
			</div>

			{activeModalItem && (
				<div
					className='fixed inset-0 bg-black/90 z-[100] flex flex-col p-4 md:p-8 items-center justify-center'
					onClick={closeModal}
				>
					<button
						onClick={(e) => {
							e.stopPropagation();
							closeModal();
						}}
						className='absolute top-4 right-4 md:top-6 md:right-6 text-white hover:text-red-500 transition-colors z-[102]'
						aria-label='Закрыть'
					>
						<X size={32} />
					</button>

					<div
						className='relative w-full h-full flex flex-col items-center justify-center'
						onClick={(e) => e.stopPropagation()}
					>
						<div className='flex-grow flex items-center justify-center w-full max-w-5xl max-h-[calc(100vh-120px)] md:max-h-[calc(100vh-150px)] mb-4'>
							{activeModalItem.type === 'single' ? (
								<img
									src={(activeModalItem as any).imageUrl}
									alt={activeModalItem.title}
									className='block max-w-full max-h-full object-contain rounded-lg shadow-xl'
								/>
							) : (
								<div className='w-full h-full bg-gray-800 rounded-lg overflow-hidden'>
									<ImageCompare
										beforeImage={(activeModalItem as any).beforeImage}
										afterImage={(activeModalItem as any).afterImage}
										altBefore={`До - ${activeModalItem.title}`}
										altAfter={`После - ${activeModalItem.title}`}
									/>
								</div>
							)}
						</div>

						<div className='w-full max-w-4xl text-center text-white flex justify-between items-center shrink-0'>
							<button
								onClick={(e) => {
									e.stopPropagation();
									prevItem();
								}}
								className='bg-black/50 rounded-full p-2 hover:bg-red-600 transition-colors'
								aria-label='Предыдущий слайд'
								disabled={workExampleData.galleryItems.length <= 1}
							>
								<ArrowLeft size={24} />
							</button>
							<div className='px-4 flex-grow min-w-0'>
								<h3
									className='text-lg md:text-xl font-semibold truncate'
									title={activeModalItem.title}
								>
									{activeModalItem.title}
								</h3>
								<p
									className='text-sm text-gray-300 truncate'
									title={activeModalItem.description}
								>
									{activeModalItem.description}
								</p>
							</div>
							<button
								onClick={(e) => {
									e.stopPropagation();
									nextItem();
								}}
								className='bg-black/50 rounded-full p-2 hover:bg-red-600 transition-colors'
								aria-label='Следующий слайд'
								disabled={workExampleData.galleryItems.length <= 1}
							>
								<ArrowLeft size={24} className='rotate-180' />
							</button>
						</div>
					</div>
				</div>
			)}
		</div>
	);
};

export default WorkExamplePage;

```

## src/pages/admin/AdminLayout.tsx

```tsx
import React from 'react';
import { Outlet } from 'react-router-dom';
import AdminHeader from '../../components/admin/AdminHeader';

const AdminLayout: React.FC = () => {
	return (
		<div className='min-h-screen bg-gray-900 text-white flex flex-col'>
			<AdminHeader />
			<main className='flex-grow container mx-auto px-4 py-8'>
				<Outlet />
			</main>
		</div>
	);
};

export default AdminLayout;

```

## src/pages/admin/CarCreatePage.tsx

```tsx
import React, { useState } from 'react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { createCar } from '../../services/apiService';
import {
	ImageFilePayload,
	ImageMeta,
	ManagedImagePayload,
} from '../../types/api';
import Loader from '../../components/Loader';
import ImageManagerModal from '../../components/admin/ImageManagerModal';
import ImagePreviewGrid from '../../components/admin/ImagePreviewGrid'; // <-- Импортируем новый компонент
import { Save } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

const CarCreatePage: React.FC = () => {
	const queryClient = useQueryClient();
	const navigate = useNavigate();
	const [name, setName] = useState('');
	const [price, setPrice] = useState('');
	const [description, setDescription] = useState('');
	const [images, setImages] = useState<ImageFilePayload[]>([]);
	const [isModalOpen, setIsModalOpen] = useState(false);

	const mutation = useMutation({
		mutationFn: createCar,
		onSuccess: (data) => {
			alert('Автомобиль успешно создан!');
			queryClient.invalidateQueries({ queryKey: ['carsForSale'] });
			navigate(`/cars/${data.id}`);
		},
		onError: (error) => {
			alert(`Ошибка при создании: ${error.message}`);
		},
	});

	const handleSubmit = (e: React.FormEvent) => {
		e.preventDefault();
		const numericPrice = parseFloat(price);
		if (isNaN(numericPrice)) {
			alert('Цена должна быть числом.');
			return;
		}

		const formData = new FormData();
		formData.append('name', name);
		formData.append('price', String(numericPrice));
		formData.append('description', description);

		const imageMeta: ImageMeta[] = [];
		images.forEach((img) => {
			imageMeta.push({ type: img.type, description: img.description });
			if (img.type === 'SINGLE') {
				formData.append('images', img.file, img.file.name);
			} else {
				formData.append('images', img.fileBefore, img.fileBefore.name);
				formData.append('images', img.fileAfter, img.fileAfter.name);
			}
		});

		if (imageMeta.length > 0) {
			formData.append('imageMeta', JSON.stringify(imageMeta));
		}

		mutation.mutate(formData);
	};

	const handleImageSave = (managedImages: ManagedImagePayload[]) => {
		const newImageFiles = managedImages.filter(
			(img): img is ImageFilePayload => !('id' in img)
		);
		setImages(newImageFiles);
	};

	// Функция для удаления изображения из превью
	const handleRemoveImage = (key: string) => {
		setImages((currentImages) =>
			currentImages.filter((img) => img.key !== key)
		);
	};

	return (
		<>
			<div className='bg-gray-800 p-6 rounded-lg shadow-lg'>
				<h1 className='text-2xl font-bold mb-6'>
					Создать запись: Автомобиль на продажу
				</h1>
				<form onSubmit={handleSubmit} className='space-y-6'>
					<div>
						<label
							htmlFor='name'
							className='block text-sm font-medium text-gray-300 mb-1'
						>
							Название (марка, модель)
						</label>
						<input
							id='name'
							type='text'
							value={name}
							onChange={(e) => setName(e.target.value)}
							required
							className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
						/>
					</div>
					<div>
						<label
							htmlFor='price'
							className='block text-sm font-medium text-gray-300 mb-1'
						>
							Цена (в рублях)
						</label>
						<input
							id='price'
							type='number'
							value={price}
							onChange={(e) => setPrice(e.target.value)}
							required
							className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
						/>
					</div>
					<div>
						<label
							htmlFor='description'
							className='block text-sm font-medium text-gray-300 mb-1'
						>
							Описание (поддерживает Markdown)
						</label>
						<textarea
							id='description'
							value={description}
							onChange={(e) => setDescription(e.target.value)}
							required
							rows={8}
							className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
						/>
					</div>

					{/* Заменяем старый блок на новый компонент */}
					<ImagePreviewGrid
						images={images}
						onManageClick={() => setIsModalOpen(true)}
						onRemoveClick={handleRemoveImage}
					/>

					<div className='pt-4'>
						<button
							type='submit'
							disabled={mutation.isPending}
							className='w-full flex items-center justify-center bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-6 rounded-md transition-colors duration-300 disabled:bg-gray-500'
						>
							{mutation.isPending ? (
								<Loader
									size='sm'
									spinnerClassName='border-white border-t-transparent'
								/>
							) : (
								<>
									<Save size={20} className='mr-2' />
									Создать автомобиль
								</>
							)}
						</button>
					</div>
				</form>
			</div>
			<ImageManagerModal
				isOpen={isModalOpen}
				onClose={() => setIsModalOpen(false)}
				onSave={handleImageSave}
				initialImages={images}
			/>
		</>
	);
};

export default CarCreatePage;

```

## src/pages/admin/CarEditPage.tsx

```tsx
import React, { useState, useEffect } from 'react';
import {
	useQuery,
	useMutation,
	useQueryClient,
} from '@tanstack/react-query';
import { useParams, useNavigate } from 'react-router-dom';
import {
	fetchCarById,
	updateCar,
	deleteCar,
} from '../../services/apiService';
import {
	ManagedImagePayload,
	ImageMeta,
	ExistingImagePayload,
	RestApiCar,
	ImageFilePayload,
} from '../../types/api';
import Loader from '../../components/Loader';
import ImageManagerModal from '../../components/admin/ImageManagerModal';
import ImagePreviewGrid from '../../components/admin/ImagePreviewGrid';
import { Save, Trash2 } from 'lucide-react';

const CarEditPage: React.FC = () => {
	const { carId } = useParams<{ carId: string }>();
	const navigate = useNavigate();
	const queryClient = useQueryClient();

	const [name, setName] = useState('');
	const [price, setPrice] = useState('');
	const [description, setDescription] = useState('');
	const [managedImages, setManagedImages] = useState<
		ManagedImagePayload[]
	>([]);
	const [isModalOpen, setIsModalOpen] = useState(false);

	const { data: carData, isLoading: isLoadingCar } =
		useQuery<RestApiCar | null>({
			queryKey: ['carData', carId],
			queryFn: () => (carId ? fetchCarById(carId) : Promise.resolve(null)),
			enabled: !!carId,
		});

	useEffect(() => {
		if (carData) {
			setName(carData.name);
			setPrice(String(carData.price));
			setDescription(carData.description);
			const existingImages: ExistingImagePayload[] = carData.images.map(
				(img) => ({
					key: img.id,
					id: img.id,
					type: img.type,
					description: img.description || '',
					previewUrl: img.urlSingle || img.urlAfter || '',
					previewUrlBefore: img.urlBefore || undefined,
					previewUrlAfter: img.urlAfter || undefined,
				})
			);
			setManagedImages(existingImages);
		}
	}, [carData]);

	const updateMutation = useMutation({
		mutationFn: ({ id, formData }: { id: string; formData: FormData }) =>
			updateCar(id, formData),
		onSuccess: (data) => {
			alert('Автомобиль успешно обновлен!');
			queryClient.invalidateQueries({ queryKey: ['carsForSale'] });
			queryClient.invalidateQueries({ queryKey: ['carData', carId] });
			navigate(`/cars/${data.id}`);
		},
		onError: (error) => {
			alert(`Ошибка при обновлении: ${error.message}`);
		},
	});

	const deleteMutation = useMutation({
		mutationFn: (id: string) => deleteCar(id),
		onSuccess: () => {
			alert('Автомобиль успешно удален!');
			queryClient.invalidateQueries({ queryKey: ['carsForSale'] });
			navigate('/admin/cars');
		},
		onError: (error) => {
			alert(`Ошибка при удалении: ${error.message}`);
		},
	});

	const handleSubmit = (e: React.FormEvent) => {
		e.preventDefault();
		if (!carId) return;

		const numericPrice = parseFloat(price);
		if (isNaN(numericPrice)) {
			alert('Цена должна быть числом.');
			return;
		}

		const formData = new FormData();
		formData.append('name', name);
		formData.append('price', String(numericPrice));
		formData.append('description', description);

		const imageIdsToKeep: string[] = [];
		const newImageMeta: ImageMeta[] = [];
		const newImageFiles: ImageFilePayload[] = [];

		managedImages.forEach((img) => {
			if ('id' in img) {
				imageIdsToKeep.push(img.id);
			} else {
				newImageFiles.push(img);
			}
		});

		newImageFiles.forEach((img) => {
			newImageMeta.push({
				type: img.type,
				description: img.description,
			});
			if (img.type === 'SINGLE') {
				formData.append('images', img.file, img.file.name);
			} else {
				formData.append('images', img.fileBefore, img.fileBefore.name);
				formData.append('images', img.fileAfter, img.fileAfter.name);
			}
		});

		formData.append('imageIdsToKeep', JSON.stringify(imageIdsToKeep));
		if (newImageMeta.length > 0) {
			formData.append('imageMeta', JSON.stringify(newImageMeta));
		}

		updateMutation.mutate({ id: carId, formData });
	};

	const handleDelete = () => {
		if (
			carId &&
			window.confirm('Вы уверены, что хотите удалить этот автомобиль?')
		) {
			deleteMutation.mutate(carId);
		}
	};

	const handleRemoveImage = (key: string) => {
		setManagedImages((currentImages) =>
			currentImages.filter((img) => img.key !== key)
		);
	};

	if (isLoadingCar) {
		return <Loader size='lg' text='Загрузка данных автомобиля...' />;
	}

	if (!carData) {
		return <p>Автомобиль не найден.</p>;
	}

	return (
		<>
			<div className='bg-gray-800 p-6 rounded-lg shadow-lg'>
				<div className='flex justify-between items-center mb-6'>
					<h1 className='text-2xl font-bold'>
						Редактирование: {carData.name}
					</h1>
					<button
						onClick={handleDelete}
						disabled={deleteMutation.isPending}
						className='flex items-center bg-red-800 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-md transition-colors disabled:opacity-50'
					>
						<Trash2 size={16} className='mr-2' />
						Удалить
					</button>
				</div>
				<form onSubmit={handleSubmit} className='space-y-6'>
					<div>
						<label
							htmlFor='name'
							className='block text-sm font-medium text-gray-300 mb-1'
						>
							Название (марка, модель)
						</label>
						<input
							id='name'
							type='text'
							value={name}
							onChange={(e) => setName(e.target.value)}
							required
							className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
						/>
					</div>
					<div>
						<label
							htmlFor='price'
							className='block text-sm font-medium text-gray-300 mb-1'
						>
							Цена (в рублях)
						</label>
						<input
							id='price'
							type='number'
							value={price}
							onChange={(e) => setPrice(e.target.value)}
							required
							className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
						/>
					</div>
					<div>
						<label
							htmlFor='description'
							className='block text-sm font-medium text-gray-300 mb-1'
						>
							Описание (поддерживает Markdown)
						</label>
						<textarea
							id='description'
							value={description}
							onChange={(e) => setDescription(e.target.value)}
							required
							rows={8}
							className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
						/>
					</div>

					<ImagePreviewGrid
						images={managedImages}
						onManageClick={() => setIsModalOpen(true)}
						onRemoveClick={handleRemoveImage}
					/>

					<div className='pt-4'>
						<button
							type='submit'
							disabled={updateMutation.isPending}
							className='w-full flex items-center justify-center bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-6 rounded-md transition-colors duration-300 disabled:bg-gray-500'
						>
							{updateMutation.isPending ? (
								<Loader
									size='sm'
									spinnerClassName='border-white border-t-transparent'
								/>
							) : (
								<>
									<Save size={20} className='mr-2' />
									Сохранить изменения
								</>
							)}
						</button>
					</div>
				</form>
			</div>
			<ImageManagerModal
				isOpen={isModalOpen}
				onClose={() => setIsModalOpen(false)}
				onSave={setManagedImages}
				initialImages={managedImages}
			/>
		</>
	);
};

export default CarEditPage;

```

## src/pages/admin/CarListPage.tsx

```tsx
import React from 'react';
import { Link } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import { fetchCars } from '../../services/apiService';
import { TransformedCarPreview } from '../../types/api';
import Loader from '../../components/Loader';
import { PlusCircle, Edit } from 'lucide-react';

const CarListPage: React.FC = () => {
	const {
		data: cars,
		isLoading,
		error,
	} = useQuery<TransformedCarPreview[]>({
		queryKey: ['carsForSale'],
		queryFn: fetchCars,
	});

	if (isLoading) {
		return (
			<div className='flex justify-center items-center h-64'>
				<Loader size='lg' text='Загрузка списка автомобилей...' />
			</div>
		);
	}

	if (error) {
		return (
			<div className='text-center text-red-500'>
				Ошибка загрузки списка автомобилей.
			</div>
		);
	}

	return (
		<div className='bg-gray-800 p-6 rounded-lg shadow-lg'>
			<div className='flex justify-between items-center mb-6'>
				<h1 className='text-2xl font-bold'>Управление автомобилями</h1>
				<Link
					to='/admin/cars/new'
					className='flex items-center bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-md transition-colors'
				>
					<PlusCircle size={20} className='mr-2' />
					Создать
				</Link>
			</div>
			<div className='overflow-x-auto'>
				<table className='min-w-full bg-gray-900 rounded-md'>
					<thead>
						<tr className='border-b border-gray-700'>
							<th className='text-left p-4'>Название</th>
							<th className='text-left p-4'>Цена</th>
							<th className='text-right p-4'>Действия</th>
						</tr>
					</thead>
					<tbody>
						{cars && cars.length > 0 ? (
							cars.map((car) => (
								<tr
									key={car.id}
									className='border-b border-gray-700 hover:bg-gray-800'
								>
									<td className='p-4'>{car.title}</td>
									<td className='p-4'>{car.cost}</td>
									<td className='p-4 text-right'>
										<Link
											to={`/admin/cars/${car.id}/edit`}
											className='inline-flex items-center bg-blue-600 hover:bg-blue-700 text-white font-semibold py-1 px-3 rounded-md transition-colors text-sm'
										>
											<Edit size={16} className='mr-1.5' />
											Редактировать
										</Link>
									</td>
								</tr>
							))
						) : (
							<tr>
								<td colSpan={3} className='text-center p-6 text-gray-400'>
									Автомобили на продажу еще не добавлены.
								</td>
							</tr>
						)}
					</tbody>
				</table>
			</div>
		</div>
	);
};

export default CarListPage;

```

## src/pages/admin/LoginPage.tsx

```tsx
import React, { useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../auth/useAuth';
import { LogIn } from 'lucide-react';

const LoginPage: React.FC = () => {
	const { login, isLoggedIn } = useAuth();
	const navigate = useNavigate();
	const location = useLocation();

	const from = location.state?.from?.pathname || '/admin/settings';

	useEffect(() => {
		if (isLoggedIn) {
			navigate(from, { replace: true });
		}
	}, [isLoggedIn, navigate, from]);

	const handleLogin = () => {
		const password = prompt('Пожалуйста, введите пароль администратора:');
		if (password !== null) {
			if (login(password)) {
				navigate(from, { replace: true });
			}
		}
	};

	return (
		<div className='min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center'>
			<div className='text-center p-8 bg-gray-800 rounded-lg shadow-xl'>
				<h1 className='text-3xl font-bold mb-4 text-red-500'>
					Вход в панель администратора
				</h1>
				<p className='text-gray-300 mb-8'>
					Для доступа к этому разделу требуется аутентификация.
				</p>
				<button
					onClick={handleLogin}
					className='w-full flex items-center justify-center bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-6 rounded-md transition-colors duration-300'
				>
					<LogIn size={20} className='mr-2' />
					Войти
				</button>
			</div>
		</div>
	);
};

export default LoginPage;

```

## src/pages/admin/ProtectedRoute.tsx

```tsx
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../auth/useAuth';

interface ProtectedRouteProps {
	children: React.ReactElement;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
	const { isLoggedIn } = useAuth();
	const location = useLocation();

	if (!isLoggedIn) {
		// Сохраняем путь, на который пользователь пытался перейти
		return (
			<Navigate to='/admin/login' state={{ from: location }} replace />
		);
	}

	return children;
};

export default ProtectedRoute;

```

## src/pages/admin/ServiceCreatePage.tsx

```tsx
import React, { useState } from 'react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { createService } from '../../services/apiService';
import {
	ImageFilePayload,
	ImageMeta,
	ManagedImagePayload,
} from '../../types/api';
import Loader from '../../components/Loader';
import ImageManagerModal from '../../components/admin/ImageManagerModal';
import ImagePreviewGrid from '../../components/admin/ImagePreviewGrid';
import { Save } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

const ServiceCreatePage: React.FC = () => {
	const queryClient = useQueryClient();
	const navigate = useNavigate();
	const [name, setName] = useState('');
	const [description, setDescription] = useState('');
	const [images, setImages] = useState<ImageFilePayload[]>([]);
	const [isModalOpen, setIsModalOpen] = useState(false);

	const mutation = useMutation({
		mutationFn: createService,
		onSuccess: (data) => {
			alert('Услуга успешно создана!');
			queryClient.invalidateQueries({ queryKey: ['services'] });
			navigate(`/services/${data.id}`);
		},
		onError: (error) => {
			alert(`Ошибка при создании: ${error.message}`);
		},
	});

	const handleSubmit = (e: React.FormEvent) => {
		e.preventDefault();

		const formData = new FormData();
		formData.append('name', name);
		formData.append('description', description);

		const imageMeta: ImageMeta[] = [];
		images.forEach((img) => {
			imageMeta.push({ type: img.type, description: img.description });
			if (img.type === 'SINGLE') {
				formData.append('images', img.file, img.file.name);
			} else {
				formData.append('images', img.fileBefore, img.fileBefore.name);
				formData.append('images', img.fileAfter, img.fileAfter.name);
			}
		});

		if (imageMeta.length > 0) {
			formData.append('imageMeta', JSON.stringify(imageMeta));
		}

		mutation.mutate(formData);
	};

	const handleImageSave = (managedImages: ManagedImagePayload[]) => {
		const newImageFiles = managedImages.filter(
			(img): img is ImageFilePayload => !('id' in img)
		);
		setImages(newImageFiles);
	};

	const handleRemoveImage = (key: string) => {
		setImages((currentImages) =>
			currentImages.filter((img) => img.key !== key)
		);
	};

	return (
		<>
			<div className='bg-gray-800 p-6 rounded-lg shadow-lg'>
				<h1 className='text-2xl font-bold mb-6'>Создать запись: Услуга</h1>
				<form onSubmit={handleSubmit} className='space-y-6'>
					<div>
						<label
							htmlFor='name'
							className='block text-sm font-medium text-gray-300 mb-1'
						>
							Название услуги
						</label>
						<input
							id='name'
							type='text'
							value={name}
							onChange={(e) => setName(e.target.value)}
							required
							className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
						/>
					</div>
					<div>
						<label
							htmlFor='description'
							className='block text-sm font-medium text-gray-300 mb-1'
						>
							Описание (поддерживает Markdown)
						</label>
						<textarea
							id='description'
							value={description}
							onChange={(e) => setDescription(e.target.value)}
							required
							rows={8}
							className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
						/>
					</div>

					<ImagePreviewGrid
						images={images}
						onManageClick={() => setIsModalOpen(true)}
						onRemoveClick={handleRemoveImage}
					/>

					<div className='pt-4'>
						<button
							type='submit'
							disabled={mutation.isPending}
							className='w-full flex items-center justify-center bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-6 rounded-md transition-colors duration-300 disabled:bg-gray-500'
						>
							{mutation.isPending ? (
								<Loader
									size='sm'
									spinnerClassName='border-white border-t-transparent'
								/>
							) : (
								<>
									<Save size={20} className='mr-2' />
									Создать услугу
								</>
							)}
						</button>
					</div>
				</form>
			</div>
			<ImageManagerModal
				isOpen={isModalOpen}
				onClose={() => setIsModalOpen(false)}
				onSave={handleImageSave}
				initialImages={images}
			/>
		</>
	);
};

export default ServiceCreatePage;

```

## src/pages/admin/ServiceEditPage.tsx

```tsx
import React, { useState, useEffect } from 'react';
import {
	useQuery,
	useMutation,
	useQueryClient,
} from '@tanstack/react-query';
import { useParams, useNavigate } from 'react-router-dom';
import {
	fetchServiceById,
	updateService,
	deleteService,
} from '../../services/apiService';
import {
	ManagedImagePayload,
	ImageMeta,
	ExistingImagePayload,
	RestApiService,
	ImageFilePayload,
} from '../../types/api';
import Loader from '../../components/Loader';
import ImageManagerModal from '../../components/admin/ImageManagerModal';
import ImagePreviewGrid from '../../components/admin/ImagePreviewGrid';
import { Save, Trash2 } from 'lucide-react';

const ServiceEditPage: React.FC = () => {
	const { serviceId } = useParams<{ serviceId: string }>();
	const navigate = useNavigate();
	const queryClient = useQueryClient();

	const [name, setName] = useState('');
	const [description, setDescription] = useState('');
	const [managedImages, setManagedImages] = useState<
		ManagedImagePayload[]
	>([]);
	const [isModalOpen, setIsModalOpen] = useState(false);

	const { data: serviceData, isLoading: isLoadingService } =
		useQuery<RestApiService | null>({
			queryKey: ['service', serviceId],
			queryFn: () =>
				serviceId ? fetchServiceById(serviceId) : Promise.resolve(null),
			enabled: !!serviceId,
		});

	useEffect(() => {
		if (serviceData) {
			setName(serviceData.name);
			setDescription(serviceData.description);
			const existingImages: ExistingImagePayload[] =
				serviceData.images.map((img) => ({
					key: img.id,
					id: img.id,
					type: img.type,
					description: img.description || '',
					previewUrl: img.urlSingle || img.urlAfter || '',
					previewUrlBefore: img.urlBefore || undefined,
					previewUrlAfter: img.urlAfter || undefined,
				}));
			setManagedImages(existingImages);
		}
	}, [serviceData]);

	const updateMutation = useMutation({
		mutationFn: ({ id, formData }: { id: string; formData: FormData }) =>
			updateService(id, formData),
		onSuccess: (data) => {
			alert('Услуга успешно обновлена!');
			queryClient.invalidateQueries({ queryKey: ['services'] });
			queryClient.invalidateQueries({ queryKey: ['service', serviceId] });
			navigate(`/services/${data.id}`);
		},
		onError: (error) => {
			alert(`Ошибка при обновлении: ${error.message}`);
		},
	});

	const deleteMutation = useMutation({
		mutationFn: (id: string) => deleteService(id),
		onSuccess: () => {
			alert('Услуга успешно удалена!');
			queryClient.invalidateQueries({ queryKey: ['services'] });
			navigate('/admin/services');
		},
		onError: (error) => {
			alert(`Ошибка при удалении: ${error.message}`);
		},
	});

	const handleSubmit = (e: React.FormEvent) => {
		e.preventDefault();
		if (!serviceId) return;

		const formData = new FormData();
		formData.append('name', name);
		formData.append('description', description);

		const imageIdsToKeep: string[] = [];
		const newImageMeta: ImageMeta[] = [];
		const newImageFiles: ImageFilePayload[] = [];

		managedImages.forEach((img) => {
			if ('id' in img) {
				imageIdsToKeep.push(img.id);
			} else {
				newImageFiles.push(img);
			}
		});

		newImageFiles.forEach((img) => {
			newImageMeta.push({
				type: img.type,
				description: img.description,
			});
			if (img.type === 'SINGLE') {
				formData.append('images', img.file, img.file.name);
			} else {
				formData.append('images', img.fileBefore, img.fileBefore.name);
				formData.append('images', img.fileAfter, img.fileAfter.name);
			}
		});

		formData.append('imageIdsToKeep', JSON.stringify(imageIdsToKeep));
		if (newImageMeta.length > 0) {
			formData.append('imageMeta', JSON.stringify(newImageMeta));
		}

		updateMutation.mutate({ id: serviceId, formData });
	};

	const handleDelete = () => {
		if (
			serviceId &&
			window.confirm('Вы уверены, что хотите удалить эту услугу?')
		) {
			deleteMutation.mutate(serviceId);
		}
	};

	const handleRemoveImage = (key: string) => {
		setManagedImages((currentImages) =>
			currentImages.filter((img) => img.key !== key)
		);
	};

	if (isLoadingService) {
		return <Loader size='lg' text='Загрузка данных услуги...' />;
	}

	if (!serviceData) {
		return <p>Услуга не найдена.</p>;
	}

	return (
		<>
			<div className='bg-gray-800 p-6 rounded-lg shadow-lg'>
				<div className='flex justify-between items-center mb-6'>
					<h1 className='text-2xl font-bold'>
						Редактирование: {serviceData.name}
					</h1>
					<button
						onClick={handleDelete}
						disabled={deleteMutation.isPending}
						className='flex items-center bg-red-800 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-md transition-colors disabled:opacity-50'
					>
						<Trash2 size={16} className='mr-2' />
						Удалить
					</button>
				</div>
				<form onSubmit={handleSubmit} className='space-y-6'>
					<div>
						<label
							htmlFor='name'
							className='block text-sm font-medium text-gray-300 mb-1'
						>
							Название услуги
						</label>
						<input
							id='name'
							type='text'
							value={name}
							onChange={(e) => setName(e.target.value)}
							required
							className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
						/>
					</div>
					<div>
						<label
							htmlFor='description'
							className='block text-sm font-medium text-gray-300 mb-1'
						>
							Описание (поддерживает Markdown)
						</label>
						<textarea
							id='description'
							value={description}
							onChange={(e) => setDescription(e.target.value)}
							required
							rows={8}
							className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
						/>
					</div>

					<ImagePreviewGrid
						images={managedImages}
						onManageClick={() => setIsModalOpen(true)}
						onRemoveClick={handleRemoveImage}
					/>

					<div className='pt-4'>
						<button
							type='submit'
							disabled={updateMutation.isPending}
							className='w-full flex items-center justify-center bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-6 rounded-md transition-colors duration-300 disabled:bg-gray-500'
						>
							{updateMutation.isPending ? (
								<Loader
									size='sm'
									spinnerClassName='border-white border-t-transparent'
								/>
							) : (
								<>
									<Save size={20} className='mr-2' />
									Сохранить изменения
								</>
							)}
						</button>
					</div>
				</form>
			</div>
			<ImageManagerModal
				isOpen={isModalOpen}
				onClose={() => setIsModalOpen(false)}
				onSave={setManagedImages}
				initialImages={managedImages}
			/>
		</>
	);
};

export default ServiceEditPage;

```

## src/pages/admin/ServiceListPage.tsx

```tsx
import React from 'react';
import { Link } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import { fetchServices } from '../../services/apiService';
import { TransformedService } from '../../types/api';
import Loader from '../../components/Loader';
import { PlusCircle, Edit } from 'lucide-react';

const ServiceListPage: React.FC = () => {
	const {
		data: services,
		isLoading,
		error,
	} = useQuery<TransformedService[]>({
		queryKey: ['services'],
		queryFn: fetchServices,
	});

	if (isLoading) {
		return (
			<div className='flex justify-center items-center h-64'>
				<Loader size='lg' text='Загрузка списка услуг...' />
			</div>
		);
	}

	if (error) {
		return (
			<div className='text-center text-red-500'>
				Ошибка загрузки списка услуг.
			</div>
		);
	}

	return (
		<div className='bg-gray-800 p-6 rounded-lg shadow-lg'>
			<div className='flex justify-between items-center mb-6'>
				<h1 className='text-2xl font-bold'>Управление услугами</h1>
				<Link
					to='/admin/services/new'
					className='flex items-center bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-md transition-colors'
				>
					<PlusCircle size={20} className='mr-2' />
					Создать
				</Link>
			</div>
			<div className='overflow-x-auto'>
				<table className='min-w-full bg-gray-900 rounded-md'>
					<thead>
						<tr className='border-b border-gray-700'>
							<th className='text-left p-4'>Название</th>
							<th className='text-right p-4'>Действия</th>
						</tr>
					</thead>
					<tbody>
						{services && services.length > 0 ? (
							services.map((service) => (
								<tr
									key={service.id}
									className='border-b border-gray-700 hover:bg-gray-800'
								>
									<td className='p-4'>{service.title}</td>
									<td className='p-4 text-right'>
										<Link
											to={`/admin/services/${service.id}/edit`}
											className='inline-flex items-center bg-blue-600 hover:bg-blue-700 text-white font-semibold py-1 px-3 rounded-md transition-colors text-sm'
										>
											<Edit size={16} className='mr-1.5' />
											Редактировать
										</Link>
									</td>
								</tr>
							))
						) : (
							<tr>
								<td colSpan={2} className='text-center p-6 text-gray-400'>
									Услуги еще не добавлены.
								</td>
							</tr>
						)}
					</tbody>
				</table>
			</div>
		</div>
	);
};

export default ServiceListPage;

```

## src/pages/admin/SettingsEditPage.tsx

```tsx
import React, { useEffect } from 'react';
import {
	useQuery,
	useMutation,
	useQueryClient,
} from '@tanstack/react-query';
import { fetchSettings, updateSettings } from '../../services/apiService';
import { RestApiSettings } from '../../types/api';
import Loader from '../../components/Loader';
import { Save } from 'lucide-react';

type SettingsFormData = Omit<RestApiSettings, 'updatedAt'>;

const SettingsEditPage: React.FC = () => {
	const queryClient = useQueryClient();
	const [formData, setFormData] = React.useState<
		Partial<SettingsFormData>
	>({});

	const { data: settings, isLoading } = useQuery({
		queryKey: ['siteSettings'],
		queryFn: async () => {
			// fetchSettings возвращает трансформированные данные, нам нужны сырые
			const response = await fetch('http://localhost:3001/api/settings');
			if (!response.ok) throw new Error('Network response was not ok');
			return (await response.json()) as RestApiSettings;
		},
	});

	const mutation = useMutation({
		mutationFn: (newSettings: Partial<SettingsFormData>) =>
			updateSettings(newSettings),
		onSuccess: () => {
			alert('Настройки успешно обновлены!');
			// Инвалидируем кеш, чтобы на всем сайте подгрузились новые данные
			queryClient.invalidateQueries({ queryKey: ['siteSettings'] });
		},
		onError: (error) => {
			alert(`Ошибка при обновлении: ${error.message}`);
		},
	});

	useEffect(() => {
		if (settings) {
			setFormData(settings);
		}
	}, [settings]);

	const handleChange = (
		e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
	) => {
		const { name, value } = e.target;
		setFormData((prev) => ({ ...prev, [name]: value }));
	};

	const handleSubmit = (e: React.FormEvent) => {
		e.preventDefault();
		mutation.mutate(formData);
	};

	if (isLoading) {
		return (
			<div className='flex justify-center items-center h-64'>
				<Loader size='lg' text='Загрузка настроек...' />
			</div>
		);
	}

	const renderInput = (
		name: keyof SettingsFormData,
		label: string,
		placeholder: string = ''
	) => (
		<div>
			<label
				htmlFor={name}
				className='block text-sm font-medium text-gray-300 mb-1'
			>
				{label}
			</label>
			<input
				type='text'
				id={name}
				name={name}
				value={formData[name] || ''}
				onChange={handleChange}
				placeholder={placeholder}
				className='w-full bg-gray-800 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
			/>
		</div>
	);

	return (
		<div className='bg-gray-800 p-6 rounded-lg shadow-lg'>
			<h1 className='text-2xl font-bold mb-6'>Редактирование настроек</h1>
			<form onSubmit={handleSubmit} className='space-y-4'>
				{renderInput('mainTitle', 'Главный заголовок')}
				{renderInput('mainSubtitle', 'Подзаголовок')}
				{renderInput('phoneNumber', 'Номер телефона', '+79991234567')}
				{renderInput('address', 'Адрес')}
				{renderInput(
					'workingHours',
					'Часы работы',
					'Ежедневно: 10:00-22:00'
				)}
				{renderInput('socialInstagram', 'Ссылка на Instagram')}
				{renderInput('socialVk', 'Ссылка на VK')}

				<div className='pt-4'>
					<button
						type='submit'
						disabled={mutation.isPending}
						className='w-full flex items-center justify-center bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-6 rounded-md transition-colors duration-300 disabled:bg-gray-500'
					>
						{mutation.isPending ? (
							<Loader
								size='sm'
								spinnerClassName='border-white border-t-transparent'
							/>
						) : (
							<>
								<Save size={20} className='mr-2' />
								Сохранить изменения
							</>
						)}
					</button>
				</div>
			</form>
		</div>
	);
};

export default SettingsEditPage;

```

## src/pages/admin/WorkExampleCreatePage.tsx

```tsx
import React, { useState } from 'react';
import {
	useQuery,
	useMutation,
	useQueryClient,
} from '@tanstack/react-query';
import {
	createWorkExample,
	fetchServices,
} from '../../services/apiService';
import {
	ImageFilePayload,
	ImageMeta,
	ManagedImagePayload,
	TransformedService,
} from '../../types/api';
import Loader from '../../components/Loader';
import ImageManagerModal from '../../components/admin/ImageManagerModal';
import ImagePreviewGrid from '../../components/admin/ImagePreviewGrid';
import { Save } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

const WorkExampleCreatePage: React.FC = () => {
	const queryClient = useQueryClient();
	const navigate = useNavigate();
	const [name, setName] = useState('');
	const [date, setDate] = useState(new Date().toISOString().split('T')[0]);
	const [description, setDescription] = useState('');
	const [serviceId, setServiceId] = useState('');
	const [images, setImages] = useState<ImageFilePayload[]>([]);
	const [isModalOpen, setIsModalOpen] = useState(false);

	const { data: services, isLoading: isLoadingServices } = useQuery<
		TransformedService[]
	>({
		queryKey: ['services'],
		queryFn: fetchServices,
	});

	const mutation = useMutation({
		mutationFn: createWorkExample,
		onSuccess: (data) => {
			alert('Пример работы успешно создан!');
			queryClient.invalidateQueries({ queryKey: ['workExamples'] });
			navigate(`/work-examples/${data.id}`);
		},
		onError: (error) => {
			alert(`Ошибка при создании: ${error.message}`);
		},
	});

	const handleSubmit = (e: React.FormEvent) => {
		e.preventDefault();
		if (!serviceId) {
			alert('Пожалуйста, выберите связанную услугу.');
			return;
		}

		const formData = new FormData();
		formData.append('name', name);
		formData.append('date', new Date(date).toISOString());
		formData.append('description', description);
		formData.append('serviceId', serviceId);

		const imageMeta: ImageMeta[] = [];
		images.forEach((img) => {
			imageMeta.push({ type: img.type, description: img.description });
			if (img.type === 'SINGLE') {
				formData.append('images', img.file, img.file.name);
			} else {
				formData.append('images', img.fileBefore, img.fileBefore.name);
				formData.append('images', img.fileAfter, img.fileAfter.name);
			}
		});

		if (imageMeta.length > 0) {
			formData.append('imageMeta', JSON.stringify(imageMeta));
		}

		mutation.mutate(formData);
	};

	const handleImageSave = (managedImages: ManagedImagePayload[]) => {
		const newImageFiles = managedImages.filter(
			(img): img is ImageFilePayload => !('id' in img)
		);
		setImages(newImageFiles);
	};

	const handleRemoveImage = (key: string) => {
		setImages((currentImages) =>
			currentImages.filter((img) => img.key !== key)
		);
	};

	return (
		<>
			<div className='bg-gray-800 p-6 rounded-lg shadow-lg'>
				<h1 className='text-2xl font-bold mb-6'>
					Создать запись: Пример работы
				</h1>
				<form onSubmit={handleSubmit} className='space-y-6'>
					<div>
						<label
							htmlFor='name'
							className='block text-sm font-medium text-gray-300 mb-1'
						>
							Название работы
						</label>
						<input
							id='name'
							type='text'
							value={name}
							onChange={(e) => setName(e.target.value)}
							required
							className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
						/>
					</div>
					<div className='grid grid-cols-1 md:grid-cols-2 gap-4'>
						<div>
							<label
								htmlFor='serviceId'
								className='block text-sm font-medium text-gray-300 mb-1'
							>
								Связанная услуга
							</label>
							<select
								id='serviceId'
								value={serviceId}
								onChange={(e) => setServiceId(e.target.value)}
								required
								className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
								disabled={isLoadingServices}
							>
								<option value='' disabled>
									{isLoadingServices ? 'Загрузка...' : 'Выберите услугу'}
								</option>
								{services?.map((service) => (
									<option key={service.id} value={service.id}>
										{service.title}
									</option>
								))}
							</select>
						</div>
						<div>
							<label
								htmlFor='date'
								className='block text-sm font-medium text-gray-300 mb-1'
							>
								Дата выполнения
							</label>
							<input
								id='date'
								type='date'
								value={date}
								onChange={(e) => setDate(e.target.value)}
								required
								className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
							/>
						</div>
					</div>
					<div>
						<label
							htmlFor='description'
							className='block text-sm font-medium text-gray-300 mb-1'
						>
							Описание (поддерживает Markdown)
						</label>
						<textarea
							id='description'
							value={description}
							onChange={(e) => setDescription(e.target.value)}
							required
							rows={6}
							className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
						/>
					</div>

					<ImagePreviewGrid
						images={images}
						onManageClick={() => setIsModalOpen(true)}
						onRemoveClick={handleRemoveImage}
					/>

					<div className='pt-4'>
						<button
							type='submit'
							disabled={mutation.isPending || isLoadingServices}
							className='w-full flex items-center justify-center bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-6 rounded-md transition-colors duration-300 disabled:bg-gray-500'
						>
							{mutation.isPending ? (
								<Loader
									size='sm'
									spinnerClassName='border-white border-t-transparent'
								/>
							) : (
								<>
									<Save size={20} className='mr-2' />
									Создать пример работы
								</>
							)}
						</button>
					</div>
				</form>
			</div>
			<ImageManagerModal
				isOpen={isModalOpen}
				onClose={() => setIsModalOpen(false)}
				onSave={handleImageSave}
				initialImages={images}
			/>
		</>
	);
};

export default WorkExampleCreatePage;

```

## src/pages/admin/WorkExampleEditPage.tsx

```tsx
import React, { useState, useEffect } from 'react';
import {
	useQuery,
	useMutation,
	useQueryClient,
} from '@tanstack/react-query';
import { useParams, useNavigate } from 'react-router-dom';
import {
	fetchWorkExampleById,
	updateWorkExample,
	deleteWorkExample,
	fetchServices,
} from '../../services/apiService';
import {
	ManagedImagePayload,
	ImageMeta,
	ExistingImagePayload,
	RestApiWorkExample,
	TransformedService,
	ImageFilePayload,
} from '../../types/api';
import Loader from '../../components/Loader';
import ImageManagerModal from '../../components/admin/ImageManagerModal';
import ImagePreviewGrid from '../../components/admin/ImagePreviewGrid';
import { Save, Trash2 } from 'lucide-react';

const WorkExampleEditPage: React.FC = () => {
	const { workExampleId } = useParams<{ workExampleId: string }>();
	const navigate = useNavigate();
	const queryClient = useQueryClient();

	const [name, setName] = useState('');
	const [date, setDate] = useState('');
	const [description, setDescription] = useState('');
	const [serviceId, setServiceId] = useState('');
	const [managedImages, setManagedImages] = useState<
		ManagedImagePayload[]
	>([]);
	const [isModalOpen, setIsModalOpen] = useState(false);

	const { data: services, isLoading: isLoadingServices } = useQuery<
		TransformedService[]
	>({
		queryKey: ['services'],
		queryFn: fetchServices,
	});

	const { data: workExampleData, isLoading: isLoadingWorkExample } =
		useQuery<RestApiWorkExample | null>({
			queryKey: ['workExampleData', workExampleId],
			queryFn: () =>
				workExampleId
					? fetchWorkExampleById(workExampleId)
					: Promise.resolve(null),
			enabled: !!workExampleId,
		});

	useEffect(() => {
		if (workExampleData) {
			setName(workExampleData.name);
			setDate(new Date(workExampleData.date).toISOString().split('T')[0]);
			setDescription(workExampleData.description);
			setServiceId(workExampleData.serviceId);
			const existingImages: ExistingImagePayload[] =
				workExampleData.images.map((img) => ({
					key: img.id,
					id: img.id,
					type: img.type,
					description: img.description || '',
					previewUrl: img.urlSingle || img.urlAfter || '',
					previewUrlBefore: img.urlBefore || undefined,
					previewUrlAfter: img.urlAfter || undefined,
				}));
			setManagedImages(existingImages);
		}
	}, [workExampleData]);

	const updateMutation = useMutation({
		mutationFn: ({ id, formData }: { id: string; formData: FormData }) =>
			updateWorkExample(id, formData),
		onSuccess: (data) => {
			alert('Пример работы успешно обновлен!');
			queryClient.invalidateQueries({ queryKey: ['workExamples'] });
			queryClient.invalidateQueries({
				queryKey: ['workExampleData', workExampleId],
			});
			navigate(`/work-examples/${data.id}`);
		},
		onError: (error) => {
			alert(`Ошибка при обновлении: ${error.message}`);
		},
	});

	const deleteMutation = useMutation({
		mutationFn: (id: string) => deleteWorkExample(id),
		onSuccess: () => {
			alert('Пример работы успешно удален!');
			queryClient.invalidateQueries({ queryKey: ['workExamples'] });
			navigate('/admin/work-examples');
		},
		onError: (error) => {
			alert(`Ошибка при удалении: ${error.message}`);
		},
	});

	const handleSubmit = (e: React.FormEvent) => {
		e.preventDefault();
		if (!workExampleId || !serviceId) {
			alert('Пожалуйста, выберите связанную услугу.');
			return;
		}

		const formData = new FormData();
		formData.append('name', name);
		formData.append('date', new Date(date).toISOString());
		formData.append('description', description);
		formData.append('serviceId', serviceId);

		const imageIdsToKeep: string[] = [];
		const newImageMeta: ImageMeta[] = [];
		const newImageFiles: ImageFilePayload[] = [];

		managedImages.forEach((img) => {
			if ('id' in img) {
				imageIdsToKeep.push(img.id);
			} else {
				newImageFiles.push(img);
			}
		});

		newImageFiles.forEach((img) => {
			newImageMeta.push({
				type: img.type,
				description: img.description,
			});
			if (img.type === 'SINGLE') {
				formData.append('images', img.file, img.file.name);
			} else {
				formData.append('images', img.fileBefore, img.fileBefore.name);
				formData.append('images', img.fileAfter, img.fileAfter.name);
			}
		});

		formData.append('imageIdsToKeep', JSON.stringify(imageIdsToKeep));
		if (newImageMeta.length > 0) {
			formData.append('imageMeta', JSON.stringify(newImageMeta));
		}

		updateMutation.mutate({ id: workExampleId, formData });
	};

	const handleDelete = () => {
		if (
			workExampleId &&
			window.confirm('Вы уверены, что хотите удалить этот пример работы?')
		) {
			deleteMutation.mutate(workExampleId);
		}
	};

	const handleRemoveImage = (key: string) => {
		setManagedImages((currentImages) =>
			currentImages.filter((img) => img.key !== key)
		);
	};

	if (isLoadingWorkExample || isLoadingServices) {
		return <Loader size='lg' text='Загрузка данных...' />;
	}

	if (!workExampleData) {
		return <p>Пример работы не найден.</p>;
	}

	return (
		<>
			<div className='bg-gray-800 p-6 rounded-lg shadow-lg'>
				<div className='flex justify-between items-center mb-6'>
					<h1 className='text-2xl font-bold'>
						Редактирование: {workExampleData.name}
					</h1>
					<button
						onClick={handleDelete}
						disabled={deleteMutation.isPending}
						className='flex items-center bg-red-800 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-md transition-colors disabled:opacity-50'
					>
						<Trash2 size={16} className='mr-2' />
						Удалить
					</button>
				</div>
				<form onSubmit={handleSubmit} className='space-y-6'>
					<div>
						<label
							htmlFor='name'
							className='block text-sm font-medium text-gray-300 mb-1'
						>
							Название работы
						</label>
						<input
							id='name'
							type='text'
							value={name}
							onChange={(e) => setName(e.target.value)}
							required
							className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
						/>
					</div>
					<div className='grid grid-cols-1 md:grid-cols-2 gap-4'>
						<div>
							<label
								htmlFor='serviceId'
								className='block text-sm font-medium text-gray-300 mb-1'
							>
								Связанная услуга
							</label>
							<select
								id='serviceId'
								value={serviceId}
								onChange={(e) => setServiceId(e.target.value)}
								required
								className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
							>
								<option value='' disabled>
									Выберите услугу
								</option>
								{services?.map((service) => (
									<option key={service.id} value={service.id}>
										{service.title}
									</option>
								))}
							</select>
						</div>
						<div>
							<label
								htmlFor='date'
								className='block text-sm font-medium text-gray-300 mb-1'
							>
								Дата выполнения
							</label>
							<input
								id='date'
								type='date'
								value={date}
								onChange={(e) => setDate(e.target.value)}
								required
								className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
							/>
						</div>
					</div>
					<div>
						<label
							htmlFor='description'
							className='block text-sm font-medium text-gray-300 mb-1'
						>
							Описание (поддерживает Markdown)
						</label>
						<textarea
							id='description'
							value={description}
							onChange={(e) => setDescription(e.target.value)}
							required
							rows={6}
							className='w-full bg-gray-900 border border-gray-600 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500'
						/>
					</div>

					<ImagePreviewGrid
						images={managedImages}
						onManageClick={() => setIsModalOpen(true)}
						onRemoveClick={handleRemoveImage}
					/>

					<div className='pt-4'>
						<button
							type='submit'
							disabled={updateMutation.isPending}
							className='w-full flex items-center justify-center bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-6 rounded-md transition-colors duration-300 disabled:bg-gray-500'
						>
							{updateMutation.isPending ? (
								<Loader
									size='sm'
									spinnerClassName='border-white border-t-transparent'
								/>
							) : (
								<>
									<Save size={20} className='mr-2' />
									Сохранить изменения
								</>
							)}
						</button>
					</div>
				</form>
			</div>
			<ImageManagerModal
				isOpen={isModalOpen}
				onClose={() => setIsModalOpen(false)}
				onSave={setManagedImages}
				initialImages={managedImages}
			/>
		</>
	);
};

export default WorkExampleEditPage;

```

## src/pages/admin/WorkExampleListPage.tsx

```tsx
import React from 'react';
import { Link } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import { fetchWorkExamples } from '../../services/apiService';
import { TransformedWorkExamplePreview } from '../../types/api';
import Loader from '../../components/Loader';
import { PlusCircle, Edit } from 'lucide-react';

const WorkExampleListPage: React.FC = () => {
	const {
		data: workExamples,
		isLoading,
		error,
	} = useQuery<TransformedWorkExamplePreview[]>({
		queryKey: ['workExamples'],
		queryFn: fetchWorkExamples,
	});

	if (isLoading) {
		return (
			<div className='flex justify-center items-center h-64'>
				<Loader size='lg' text='Загрузка примеров работ...' />
			</div>
		);
	}

	if (error) {
		return (
			<div className='text-center text-red-500'>
				Ошибка загрузки примеров работ.
			</div>
		);
	}

	return (
		<div className='bg-gray-800 p-6 rounded-lg shadow-lg'>
			<div className='flex justify-between items-center mb-6'>
				<h1 className='text-2xl font-bold'>Управление примерами работ</h1>
				<Link
					to='/admin/work-examples/new'
					className='flex items-center bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-md transition-colors'
				>
					<PlusCircle size={20} className='mr-2' />
					Создать
				</Link>
			</div>
			<div className='overflow-x-auto'>
				<table className='min-w-full bg-gray-900 rounded-md'>
					<thead>
						<tr className='border-b border-gray-700'>
							<th className='text-left p-4'>Название</th>
							<th className='text-right p-4'>Действия</th>
						</tr>
					</thead>
					<tbody>
						{workExamples && workExamples.length > 0 ? (
							workExamples.map((item) => (
								<tr
									key={item.id}
									className='border-b border-gray-700 hover:bg-gray-800'
								>
									<td className='p-4'>{item.title}</td>
									<td className='p-4 text-right'>
										<Link
											to={`/admin/work-examples/${item.id}/edit`}
											className='inline-flex items-center bg-blue-600 hover:bg-blue-700 text-white font-semibold py-1 px-3 rounded-md transition-colors text-sm'
										>
											<Edit size={16} className='mr-1.5' />
											Редактировать
										</Link>
									</td>
								</tr>
							))
						) : (
							<tr>
								<td colSpan={2} className='text-center p-6 text-gray-400'>
									Примеры работ еще не добавлены.
								</td>
							</tr>
						)}
					</tbody>
				</table>
			</div>
		</div>
	);
};

export default WorkExampleListPage;

```

## src/services/apiService.ts

```typescript
import {
	RestApiCar,
	RestApiImage,
	RestApiService,
	RestApiSettings,
	RestApiWorkExample,
	SiteSettings,
	GalleryItem,
	TransformedService,
	TransformedWorkExamplePreview,
	TransformedWorkExamplePageData,
	TransformedCarPreview,
	TransformedCarPageData,
	ImageMeta,
} from '../types/api';
import {
	formatDisplayPhoneNumber,
	formatPhoneNumberForTelLink,
} from '../lib/utils';

// Базовый URL вашего бэкенда
const API_BASE_URL = '';
const API_PREFIX = '/api';

// Вспомогательная функция для выполнения GET запросов
async function apiFetch<T>(endpoint: string): Promise<T> {
	const response = await fetch(`${API_BASE_URL}${API_PREFIX}${endpoint}`);
	if (!response.ok) {
		const errorData = await response.json().catch(() => ({}));
		throw new Error(
			errorData.error || `Request failed with status ${response.status}`
		);
	}
	return response.json();
}

// Вспомогательная функция для POST, PUT, DELETE
// Теперь корректно обрабатывает и JSON, и FormData
async function apiMutate<T>(
	endpoint: string,
	method: 'POST' | 'PUT' | 'DELETE',
	body?: any
): Promise<T> {
	const isFormData = body instanceof FormData;

	const response = await fetch(`${API_BASE_URL}${API_PREFIX}${endpoint}`, {
		method,
		headers: isFormData ? {} : { 'Content-Type': 'application/json' },
		body: isFormData ? body : body ? JSON.stringify(body) : undefined,
	});

	if (!response.ok) {
		const errorData = await response.json().catch(() => ({}));
		throw new Error(
			errorData.error || `Request failed with status ${response.status}`
		);
	}

	if (response.status === 204) {
		return {} as T; // Для DELETE запросов
	}

	return response.json();
}

// Вспомогательная функция для формирования полного URL изображения
function getFullImageUrl(relativePath: string | null | undefined): string {
	if (!relativePath) {
		return '/placeholder.png'; // Путь к вашему изображению-заглушке
	}
	// Если путь уже абсолютный, возвращаем как есть
	if (relativePath.startsWith('http') || relativePath.startsWith('//')) {
		return relativePath;
	}
	return `${API_BASE_URL}${relativePath}`;
}

// Вспомогательная функция для форматирования номера для WhatsApp
const formatPhoneNumberForWhatsApp = (
	phone: string | undefined | null
): string => {
	if (!phone) return '';
	// Оставляет только цифры, удаляя +, (, ), - и пробелы
	let cleaned = phone.replace(/[^\d]/g, '');
	// Если номер начинается с 8, заменяем на 7 (стандарт для РФ)
	if (cleaned.startsWith('8') && cleaned.length === 11) {
		cleaned = '7' + cleaned.substring(1);
	}
	return cleaned;
};

// --- Трансформаторы данных ---

function transformRestApiImage(image: RestApiImage): GalleryItem {
	const baseItem = {
		id: image.id,
		title: image.description || 'Изображение',
		description: image.description || '',
	};

	if (image.type === 'BEFORE_AFTER') {
		return {
			...baseItem,
			type: 'beforeAfter',
			beforeImage: getFullImageUrl(image.urlBefore),
			afterImage: getFullImageUrl(image.urlAfter),
		};
	}

	return {
		...baseItem,
		type: 'single',
		imageUrl: getFullImageUrl(image.urlSingle),
	};
}

// --- Функции для вызова API ---

/**
 * Получает и трансформирует общие настройки сайта.
 */
export const fetchSettings = async (): Promise<SiteSettings | null> => {
	try {
		const settings = await apiFetch<RestApiSettings>('/settings');
		return {
			mainTitle: settings.mainTitle,
			mainSubtitle: settings.mainSubtitle,
			phoneNumber: formatDisplayPhoneNumber(settings.phoneNumber),
			phoneLink: formatPhoneNumberForTelLink(settings.phoneNumber),
			whatsappLink: `https://wa.me/${formatPhoneNumberForWhatsApp(
				settings.phoneNumber
			)}`,
			address: settings.address,
			workingHours: settings.workingHours,
		};
	} catch (error) {
		console.error('Ошибка при загрузке настроек сайта:', error);
		// Возвращаем дефолтные значения, чтобы сайт не падал
		return {
			mainTitle: 'Автосервис',
			mainSubtitle: 'ТрейдАвто-групп',
			phoneNumber: formatDisplayPhoneNumber('+79655118585'),
			phoneLink: formatPhoneNumberForTelLink('+79655118585'),
			whatsappLink: `https://wa.me/79655118585`,
			address: 'Березовский, Транспортников 42А',
			workingHours: 'Ежедневно: 10:00-22:00',
		};
	}
};

/**
 * Обновляет настройки сайта.
 */
export const updateSettings = (
	data: Partial<Omit<RestApiSettings, 'updatedAt'>>
): Promise<RestApiSettings> => {
	return apiMutate<RestApiSettings>('/settings', 'POST', data);
};

/**
 * Получает список всех услуг.
 */
export const fetchServices = async (): Promise<TransformedService[]> => {
	const services = await apiFetch<RestApiService[]>('/services');
	return services.map((service) => ({
		id: service.id,
		title: service.name,
		description: service.description,
		// Берем первое изображение как главное
		imageUrl: getFullImageUrl(service.images?.[0]?.urlSingle),
	}));
};

/**
 * Получает одну услугу по ID. Возвращает "сырые" данные с сервера.
 */
export const fetchServiceById = async (
	id: string
): Promise<RestApiService | null> => {
	try {
		const service = await apiFetch<RestApiService>(`/services/${id}`);
		// Дополняем URL изображений, чтобы они работали на клиенте
		if (service.images) {
			service.images = service.images.map((img) => ({
				...img,
				urlSingle: getFullImageUrl(img.urlSingle),
				urlBefore: getFullImageUrl(img.urlBefore),
				urlAfter: getFullImageUrl(img.urlAfter),
			}));
		}
		return service;
	} catch (error) {
		console.error(`Ошибка загрузки услуги с ID ${id}:`, error);
		return null;
	}
};

/**
 * Создает новую услугу с файлами.
 */
export const createService = (
	formData: FormData
): Promise<RestApiService> => {
	return apiMutate<RestApiService>('/services', 'POST', formData);
};

/**
 * Обновляет существующую услугу.
 */
export const updateService = (
	id: string,
	formData: FormData
): Promise<RestApiService> => {
	return apiMutate<RestApiService>(`/services/${id}`, 'PUT', formData);
};

/**
 * Удаляет услугу по ID.
 */
export const deleteService = (id: string): Promise<void> => {
	return apiMutate<void>(`/services/${id}`, 'DELETE');
};

/**
 * Получает список всех примеров работ для галереи.
 */
export const fetchWorkExamples = async (): Promise<
	TransformedWorkExamplePreview[]
> => {
	const workExamples = await apiFetch<RestApiWorkExample[]>(
		'/work-examples'
	);
	return workExamples
		.map((we) => {
			if (!we.images || we.images.length === 0) {
				return null; // Пропускаем примеры без изображений
			}
			return {
				id: we.id,
				title: we.name,
				// Сокращаем описание для превью
				description:
					we.description.length > 100
						? we.description.substring(0, 100) + '...'
						: we.description,
				previewImage: transformRestApiImage(we.images[0]),
			};
		})
		.filter(
			(item): item is TransformedWorkExamplePreview => item !== null
		);
};

/**
 * Получает один пример работы по ID. Возвращает "сырые" данные с сервера.
 */
export const fetchWorkExampleById = async (
	id: string
): Promise<RestApiWorkExample | null> => {
	try {
		const we = await apiFetch<RestApiWorkExample>(`/work-examples/${id}`);
		// Дополняем URL изображений
		if (we.images) {
			we.images = we.images.map((img) => ({
				...img,
				urlSingle: getFullImageUrl(img.urlSingle),
				urlBefore: getFullImageUrl(img.urlBefore),
				urlAfter: getFullImageUrl(img.urlAfter),
			}));
		}
		return we;
	} catch (error) {
		console.error(`Ошибка загрузки примера работы с ID ${id}:`, error);
		return null;
	}
};

/**
 * Создает новый пример работы с файлами.
 */
export const createWorkExample = (
	formData: FormData
): Promise<RestApiWorkExample> => {
	return apiMutate<RestApiWorkExample>('/work-examples', 'POST', formData);
};

/**
 * Обновляет существующий пример работы.
 */
export const updateWorkExample = (
	id: string,
	formData: FormData
): Promise<RestApiWorkExample> => {
	return apiMutate<RestApiWorkExample>(
		`/work-examples/${id}`,
		'PUT',
		formData
	);
};

/**
 * Удаляет пример работы по ID.
 */
export const deleteWorkExample = (id: string): Promise<void> => {
	return apiMutate<void>(`/work-examples/${id}`, 'DELETE');
};

/**
 * Получает список всех автомобилей для продажи.
 */
export const fetchCars = async (): Promise<TransformedCarPreview[]> => {
	const cars = await apiFetch<RestApiCar[]>('/cars');
	return cars.map((car) => ({
		id: car.id,
		title: car.name,
		cost: new Intl.NumberFormat('ru-RU', {
			style: 'currency',
			currency: 'RUB',
			minimumFractionDigits: 0,
		}).format(car.price),
		imageUrl: getFullImageUrl(car.images?.[0]?.urlSingle),
	}));
};

/**
 * Получает один автомобиль по ID. Возвращает "сырые" данные с сервера.
 */
export const fetchCarById = async (
	id: string
): Promise<RestApiCar | null> => {
	try {
		const car = await apiFetch<RestApiCar>(`/cars/${id}`);
		// Дополняем URL изображений
		if (car.images) {
			car.images = car.images.map((img) => ({
				...img,
				urlSingle: getFullImageUrl(img.urlSingle),
				urlBefore: getFullImageUrl(img.urlBefore),
				urlAfter: getFullImageUrl(img.urlAfter),
			}));
		}
		return car;
	} catch (error) {
		console.error(`Ошибка загрузки автомобиля с ID ${id}:`, error);
		return null;
	}
};

/**
 * Создает новый автомобиль с файлами.
 */
export const createCar = (formData: FormData): Promise<RestApiCar> => {
	return apiMutate<RestApiCar>('/cars', 'POST', formData);
};

/**
 * Обновляет существующий автомобиль.
 */
export const updateCar = (
	id: string,
	formData: FormData
): Promise<RestApiCar> => {
	return apiMutate<RestApiCar>(`/cars/${id}`, 'PUT', formData);
};

/**
 * Удаляет автомобиль по ID.
 */
export const deleteCar = (id: string): Promise<void> => {
	return apiMutate<void>(`/cars/${id}`, 'DELETE');
};

```

## src/types/api.ts

```typescript
// src/types/api.ts

// --- Типы, соответствующие REST API Schema ---

/**
 * Модель изображения, как она приходит с REST API.
 */
export interface RestApiImage {
	id: string;
	description: string | null;
	type: 'SINGLE' | 'BEFORE_AFTER';
	urlSingle: string | null;
	urlBefore: string | null;
	urlAfter: string | null;
	carId: string | null;
	serviceId: string | null;
	workExampleId: string | null;
	createdAt: string;
	updatedAt: string;
}

/**
 * Модель автомобиля, как она приходит с REST API.
 */
export interface RestApiCar {
	id: string;
	name: string;
	price: number;
	description: string; // Markdown
	images: RestApiImage[];
	createdAt: string;
	updatedAt: string;
}

/**
 * Модель услуги, как она приходит с REST API.
 */
export interface RestApiService {
	id: string;
	name: string;
	description: string; // Markdown
	images: RestApiImage[];
	workExamples: RestApiWorkExample[];
	createdAt: string;
	updatedAt: string;
}

/**
 * Модель примера работы, как она приходит с REST API.
 */
export interface RestApiWorkExample {
	id: string;
	name: string;
	date: string;
	description: string; // Markdown
	serviceId: string;
	service?: RestApiService; // Может быть включен при детальном запросе
	images: RestApiImage[];
	createdAt: string;
	updatedAt: string;
}

/**
 * Модель настроек сайта, как она приходит с REST API.
 */
export interface RestApiSettings {
	mainTitle: string;
	mainSubtitle: string;
	phoneNumber: string;
	socialInstagram: string;
	socialVk: string;
	address: string;
	workingHours: string;
	updatedAt: string;
}

// --- Типы для создания новых записей (Payloads) ---

/**
 * Внутренний тип для UI для управления файлами перед загрузкой.
 */
export type ImageFilePayload =
	| {
			// Уникальный ключ для React-списков
			key: string;
			type: 'SINGLE';
			file: File;
			description: string;
			previewUrl: string;
	  }
	| {
			// Уникальный ключ для React-списков
			key: string;
			type: 'BEFORE_AFTER';
			fileBefore: File;
			fileAfter: File;
			description: string;
			previewUrlBefore: string;
			previewUrlAfter: string;
	  };

/**
 * Внутренний тип для UI для представления уже загруженного изображения в модалке.
 */
export interface ExistingImagePayload {
	key: string; // db id
	id: string; // db id
	type: 'SINGLE' | 'BEFORE_AFTER';
	description: string;
	// Для рендеринга
	previewUrl: string;
	previewUrlBefore?: string;
	previewUrlAfter?: string;
}

/**
 * Объединенный тип для ImageManagerModal, может содержать как новые, так и существующие изображения.
 */
export type ManagedImagePayload = ImageFilePayload | ExistingImagePayload;

/**
 * Тип для создания мета-информации для изображений при отправке FormData.
 */
export type ImageMeta = {
	type: 'SINGLE' | 'BEFORE_AFTER';
	description: string;
};

// Полезные нагрузки для функций создания теперь будут формироваться внутри страниц
// и передаваться в виде FormData. Эти интерфейсы описывают данные, необходимые для
// формирования FormData.

export interface CreateCarData {
	name: string;
	price: number;
	description: string;
	images: ImageFilePayload[];
}

export interface CreateServiceData {
	name: string;
	description: string;
	images: ImageFilePayload[];
}

export interface CreateWorkExampleData {
	name: string;
	date: string; // ISO-8601
	description: string;
	serviceId: string;
	images: ImageFilePayload[];
}

// --- Трансформированные типы для использования в компонентах ---

/**
 * Общие настройки сайта, подготовленные для использования в компонентах.
 */
export interface SiteSettings {
	mainTitle: string;
	mainSubtitle: string;
	phoneNumber: string;
	phoneLink: string; // для href="tel:..."
	whatsappLink: string; // для href="https://wa.me/..."
	address: string;
	workingHours: string;
}

/**
 * Базовый тип для элемента изображения в галерее (одиночное или до/после).
 */
export interface GalleryItemBase {
	id: string;
	title: string;
	description: string;
}

/**
 * Одиночное изображение в галерее.
 */
export interface GallerySingleItem extends GalleryItemBase {
	type: 'single';
	imageUrl: string;
}

/**
 * Сравнение "до/после" в галерее.
 */
export interface GalleryBeforeAfterItem extends GalleryItemBase {
	type: 'beforeAfter';
	beforeImage: string;
	afterImage: string;
}

export type GalleryItem = GallerySingleItem | GalleryBeforeAfterItem;

/**
 * Услуга, подготовленная для отображения (например, в ServiceCard).
 */
export interface TransformedService {
	id: string;
	title: string;
	description: string; // Markdown
	imageUrl: string;
}

/**
 * Пример работы, подготовленный для превью в галерее.
 */
export interface TransformedWorkExamplePreview {
	id: string; // ID самого WorkExample
	title: string; // Название WorkExample
	description: string; // Описание WorkExample (сокращенное)
	previewImage: GalleryItem; // Первый элемент из `images` для отображения
}

/**
 * Полные данные примера работы для страницы /work-examples/:id
 */
export interface TransformedWorkExamplePageData {
	id: string;
	title: string;
	description: string; // Markdown
	galleryItems: GalleryItem[];
}

/**
 * Автомобиль, подготовленный для превью в списке.
 */
export interface TransformedCarPreview {
	id: string;
	title: string;
	cost: string; // Уже отформатированная цена
	imageUrl: string;
}

/**
 * Полные данные автомобиля для страницы /cars/:id
 */
export interface TransformedCarPageData {
	id: string;
	title: string;
	cost: string; // Отформатированная цена
	description: string; // Markdown
	images: GalleryItem[];
}

```

## src/vite-env.d.ts

```typescript
/// <reference types="vite/client" />

```

Отвечай на русском языке это очень важно. 

Вот nginx файл

# HTTP -> HTTPS редирект (остается без изменений)
server {
    listen 80;
    listen [::]:80;

    server_name tradeauto-group.ru www.tradeauto-group.ru;

    location /.well-known/acme-challenge/ {
        root /var/AutoServiceGroup/dist; # <-- Убедитесь, что путь к фронтенду верный
        allow all;
    }

    location / {
        return 301 https://$host$request_uri;
    }

    access_log /var/log/nginx/tradeauto-group.ru.http.access.log;
    error_log /var/log/nginx/tradeauto-group.ru.http.error.log;
}

# Основная конфигурация HTTPS
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name tradeauto-group.ru www.tradeauto-group.ru;

    # SSL сертификаты (остаются без изменений)
    ssl_certificate /etc/letsencrypt/live/tradeauto-group.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/tradeauto-group.ru/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    access_log /var/log/nginx/tradeauto-group.ru.https.access.log;
    error_log /var/log/nginx/tradeauto-group.ru.https.error.log;

    client_max_body_size 100M;

    # --- ИЗМЕНЕНИЯ ЗДЕСЬ ---

    # 1. Раздача загруженных изображений
    # Путь изменен на папку uploads вашего нового проекта.
    location /uploads/ {
        alias /var/auto-service-backend/uploads/;
        try_files $uri =404;
        expires 1M;
        add_header Cache-Control "public";
    }

    # 2. Проксирование запросов к API
    # Упрощен location, так как все роуты начинаются с /api/
    # Порт изменен на 3001, на котором работает ваш новый бэкенд.
    location /api/ {
        proxy_pass http://localhost:3001;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_pass_request_headers on;
    }

    # 3. Раздача статики фронтенда (остается как было, но убедитесь, что путь верный)
    location / {
        root /var/AutoServiceGroup/dist; # <-- ПУТЬ К ВАШЕМУ ФРОНТЕНД-ПРИЛОЖЕНИЮ
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }
}


А вот файлы сервера

# Project Structure

```
├── prisma
│   ├── migrations
│   │   ├── 20250611174926_init
│   │   │   └── migration.sql
│   │   └── migration_lock.toml
│   └── schema.prisma
├── src
│   ├── controllers
│   │   ├── car.controller.js
│   │   ├── service.controller.js
│   │   ├── settings.controller.js
│   │   └── workExample.controller.js
│   ├── lib
│   │   └── prisma.js
│   ├── middleware
│   │   └── upload.js
│   ├── routes
│   │   ├── car.routes.js
│   │   ├── index.js
│   │   ├── service.routes.js
│   │   ├── settings.routes.js
│   │   └── workExample.routes.js
│   ├── app.js
│   └── server.js
├── docker-compose.yml
├── package-lock.json
├── package.json
└── vite.config.ts
```

# File Contents

## src/app.js

```javascript
// src/app.js
import express from 'express';
import cors from 'cors';
import path from 'path';
import apiRouter from './routes/index.js';

// Создаем экземпляр Express
const app = express();

// Middleware для обработки CORS-запросов
app.use(cors());

// Middleware для парсинга JSON-тела запросов
app.use(express.json());

// Middleware для раздачи статических файлов из папки 'uploads'
// Теперь файлы будут доступны по URL /uploads/filename.jpg
app.use('/uploads', express.static(path.join(process.cwd(), 'uploads')));

// Основной роутер для API
app.use('/api', apiRouter);

// Простой маршрут для проверки работы сервера
app.get('/', (req, res) => {
	res.send('Auto Service API is running!');
});

export default app;

```

## src/controllers/car.controller.js

```javascript
// src/controllers/car.controller.js
import prisma from '../lib/prisma.js';
import fs from 'fs/promises';
import path from 'path';
import { ImageType } from '@prisma/client';

// Хелпер для удаления файлов
const deleteFile = async (filePath) => {
	try {
		// filePath будет вида /uploads/image.png, убираем /
		const fullPath = path.join(process.cwd(), filePath);
		await fs.unlink(fullPath);
	} catch (error) {
		// Не страшно, если файл уже удален, но логируем другие ошибки
		if (error.code !== 'ENOENT') {
			console.error(`Failed to delete file: ${filePath}`, error);
		}
	}
};

export const carController = {
	// GET /api/cars - Получить все автомобили
	async getAll(req, res) {
		try {
			const cars = await prisma.car.findMany({
				include: { images: true }, // Включаем связанные изображения
			});
			res.json(cars);
		} catch (error) {
			res.status(500).json({ error: 'Failed to fetch cars' });
		}
	},

	// GET /api/cars/:id - Получить один автомобиль
	async getById(req, res) {
		try {
			const { id } = req.params;
			const car = await prisma.car.findUnique({
				where: { id },
				include: { images: true },
			});
			if (!car) {
				res.status(404).json({ error: 'Car not found' });
				return;
			}
			res.json(car);
		} catch (error) {
			res.status(500).json({ error: 'Failed to fetch car' });
		}
	},

	// POST /api/cars - Создать новый автомобиль
	async create(req, res) {
		try {
			// Данные из формы (multipart/form-data)
			const { name, price, description } = req.body;
			// Файлы от multer
			const files = req.files;

			// Преобразуем загруженные файлы в формат для создания Image в Prisma
			const imagesToCreate =
				files?.map((file) => ({
					urlSingle: `/uploads/${file.filename}`, // Путь для доступа к файлу
					type: ImageType.SINGLE,
				})) || [];

			const newCar = await prisma.car.create({
				data: {
					name,
					price: parseFloat(price), // цена может прийти как строка
					description,
					images: {
						create: imagesToCreate, // Создаем связанные изображения
					},
				},
				include: { images: true },
			});
			res.status(201).json(newCar);
		} catch (error) {
			res
				.status(500)
				.json({ error: 'Failed to create car', details: error.message });
		}
	},

	// PUT /api/cars/:id - Обновить автомобиль
	async update(req, res) {
		try {
			const { id } = req.params;
			const { name, price, description } = req.body;
			const files = req.files;
			let oldImages = [];

			const updatedCar = await prisma.$transaction(async (tx) => {
				// 1. Если загружены новые файлы, удаляем старые записи из БД
				if (files && files.length > 0) {
					const carToUpdate = await tx.car.findUnique({
						where: { id },
						select: { images: { select: { urlSingle: true } } },
					});
					oldImages = carToUpdate?.images || [];

					await tx.image.deleteMany({
						where: { carId: id },
					});
				}

				// 2. Обновляем данные автомобиля и создаем новые записи Image
				const imagesToCreate =
					files?.map((file) => ({
						urlSingle: `/uploads/${file.filename}`,
						type: ImageType.SINGLE,
					})) || undefined; // undefined, если файлы не обновляются

				return tx.car.update({
					where: { id },
					data: {
						name,
						price: price ? parseFloat(price) : undefined,
						description,
						...(imagesToCreate && {
							images: {
								create: imagesToCreate,
							},
						}),
					},
					include: { images: true },
				});
			});

			// 3. После успешной транзакции удаляем старые файлы с диска
			for (const image of oldImages) {
				if (image.urlSingle) {
					await deleteFile(image.urlSingle);
				}
			}

			res.json(updatedCar);
		} catch (error) {
			res
				.status(500)
				.json({ error: 'Failed to update car', details: error.message });
		}
	},

	// DELETE /api/cars/:id - Удалить автомобиль
	async delete(req, res) {
		try {
			const { id } = req.params;

			// Получаем пути к файлам перед удалением записи из БД
			const carToDelete = await prisma.car.findUnique({
				where: { id },
				include: { images: true },
			});
			const imagesToDelete = carToDelete?.images || [];

			// Удаляем запись из БД (связанные Image удалятся каскадно)
			await prisma.car.delete({
				where: { id },
			});

			// Удаляем файлы с диска
			for (const image of imagesToDelete) {
				if (image.urlSingle) {
					await deleteFile(image.urlSingle);
				}
			}

			res.status(204).send(); // No Content
		} catch (error) {
			res.status(500).json({ error: 'Failed to delete car' });
		}
	},
};

```

## src/controllers/service.controller.js

```javascript
// src/controllers/service.controller.js
import prisma from '../lib/prisma.js';
import fs from 'fs/promises';
import path from 'path';
import { ImageType } from '@prisma/client';

// Хелпер для удаления файлов
const deleteFile = async (filePath) => {
	try {
		// filePath будет вида /uploads/image.png, поэтому строим полный путь
		const fullPath = path.join(process.cwd(), filePath);
		await fs.unlink(fullPath);
	} catch (error) {
		// Не страшно, если файл уже удален, но логируем другие ошибки
		if (error.code !== 'ENOENT') {
			console.error(`Failed to delete file: ${filePath}`, error);
		}
	}
};

export const serviceController = {
	// GET /api/services - Получить все услуги
	async getAll(req, res) {
		try {
			const services = await prisma.service.findMany({
				include: { images: true }, // Включаем связанные изображения
			});
			res.json(services);
		} catch (error) {
			res.status(500).json({ error: 'Failed to fetch services' });
		}
	},

	// GET /api/services/:id - Получить одну услугу
	async getById(req, res) {
		try {
			const { id } = req.params;
			const service = await prisma.service.findUnique({
				where: { id },
				include: { images: true, workExamples: true }, // Включаем изображения и примеры работ
			});
			if (!service) {
				res.status(404).json({ error: 'Service not found' });
				return;
			}
			res.json(service);
		} catch (error) {
			res.status(500).json({ error: 'Failed to fetch service' });
		}
	},

	// POST /api/services - Создать новую услугу
	async create(req, res) {
		try {
			const { name, description } = req.body;
			const files = req.files;

			const imagesToCreate =
				files?.map((file) => ({
					urlSingle: `/uploads/${file.filename}`,
					type: ImageType.SINGLE,
				})) || [];

			const newService = await prisma.service.create({
				data: {
					name,
					description,
					images: {
						create: imagesToCreate,
					},
				},
				include: { images: true },
			});
			res.status(201).json(newService);
		} catch (error) {
			res.status(500).json({
				error: 'Failed to create service',
				details: error.message,
			});
		}
	},

	// PUT /api/services/:id - Обновить услугу
	async update(req, res) {
		try {
			const { id } = req.params;
			const { name, description } = req.body;
			const files = req.files;
			let oldImages = [];

			const updatedService = await prisma.$transaction(async (tx) => {
				// 1. Если загружены новые файлы, удаляем старые записи из БД
				if (files && files.length > 0) {
					const serviceToUpdate = await tx.service.findUnique({
						where: { id },
						select: { images: { select: { urlSingle: true } } },
					});
					oldImages = serviceToUpdate?.images || [];

					await tx.image.deleteMany({
						where: { serviceId: id },
					});
				}

				// 2. Обновляем данные и создаем новые записи Image
				const imagesToCreate =
					files?.map((file) => ({
						urlSingle: `/uploads/${file.filename}`,
						type: ImageType.SINGLE,
					})) || undefined;

				return tx.service.update({
					where: { id },
					data: {
						name,
						description,
						...(imagesToCreate && {
							images: {
								create: imagesToCreate,
							},
						}),
					},
					include: { images: true, workExamples: true },
				});
			});

			// 3. После успешной транзакции удаляем старые файлы с диска
			for (const image of oldImages) {
				if (image.urlSingle) {
					await deleteFile(image.urlSingle);
				}
			}

			res.json(updatedService);
		} catch (error) {
			res.status(500).json({
				error: 'Failed to update service',
				details: error.message,
			});
		}
	},

	// DELETE /api/services/:id - Удалить услугу
	async delete(req, res) {
		try {
			const { id } = req.params;

			const serviceToDelete = await prisma.service.findUnique({
				where: { id },
				include: { images: true },
			});
			const imagesToDelete = serviceToDelete?.images || [];

			await prisma.service.delete({
				where: { id },
			});

			for (const image of imagesToDelete) {
				if (image.urlSingle) {
					await deleteFile(image.urlSingle);
				}
			}

			res.status(204).send(); // No Content
		} catch (error) {
			res.status(500).json({ error: 'Failed to delete service' });
		}
	},
};

```

## src/controllers/settings.controller.js

```javascript
// src/controllers/settings.controller.js
import prisma from '../lib/prisma.js';

// Фиксированный ID для единственной строки настроек
const SETTINGS_ID = 1;

export const settingsController = {
	// GET /api/settings - Получить настройки
	async get(req, res) {
		try {
			let settings = await prisma.siteSettings.findUnique({
				where: { id: SETTINGS_ID },
			});

			// Если настроек еще нет, создаем их с дефолтными значениями
			if (!settings) {
				settings = await prisma.siteSettings.create({
					data: { id: SETTINGS_ID }, // Prisma использует значения по умолчанию из схемы
				});
			}

			res.json(settings);
		} catch (error) {
			res.status(500).json({
				error: 'Failed to fetch settings',
				details: error.message,
			});
		}
	},

	// POST или PUT /api/settings - Обновить настройки
	async update(req, res) {
		try {
			const dataToUpdate = req.body;

			const updatedSettings = await prisma.siteSettings.upsert({
				where: { id: SETTINGS_ID },
				update: dataToUpdate,
				create: {
					id: SETTINGS_ID,
					...dataToUpdate,
				},
			});

			res.json(updatedSettings);
		} catch (error) {
			res.status(500).json({
				error: 'Failed to update settings',
				details: error.message,
			});
		}
	},
};

```

## src/controllers/workExample.controller.js

```javascript
// src/controllers/workExample.controller.js
import prisma from '../lib/prisma.js';
import fs from 'fs/promises';
import path from 'path';
import { ImageType } from '@prisma/client';

// Хелпер для удаления файлов
const deleteFile = async (filePath) => {
	try {
		// filePath будет вида /uploads/image.png, поэтому строим полный путь
		const fullPath = path.join(process.cwd(), filePath);
		await fs.unlink(fullPath);
	} catch (error) {
		// Не страшно, если файл уже удален, но логируем другие ошибки
		if (error.code !== 'ENOENT') {
			console.error(`Failed to delete file: ${filePath}`, error);
		}
	}
};

export const workExampleController = {
	// GET /api/work-examples - Получить все примеры работ
	async getAll(req, res) {
		try {
			const workExamples = await prisma.workExample.findMany({
				include: { images: true, service: true }, // Включаем изображения и связанную услугу
			});
			res.json(workExamples);
		} catch (error) {
			res.status(500).json({ error: 'Failed to fetch work examples' });
		}
	},

	// GET /api/work-examples/:id - Получить один пример работы
	async getById(req, res) {
		try {
			const { id } = req.params;
			const workExample = await prisma.workExample.findUnique({
				where: { id },
				include: { images: true, service: true },
			});
			if (!workExample) {
				res.status(404).json({ error: 'Work example not found' });
				return;
			}
			res.json(workExample);
		} catch (error) {
			res.status(500).json({ error: 'Failed to fetch work example' });
		}
	},

	// POST /api/work-examples - Создать новый пример работы
	async create(req, res) {
		try {
			const { name, date, description, serviceId } = req.body;
			const files = req.files;

			if (!serviceId) {
				res.status(400).json({ error: 'serviceId is required' });
				return;
			}

			const imagesToCreate =
				files?.map((file) => ({
					urlSingle: `/uploads/${file.filename}`,
					type: ImageType.SINGLE,
				})) || [];

			const newWorkExample = await prisma.workExample.create({
				data: {
					name,
					date: date ? new Date(date) : new Date(),
					description,
					serviceId,
					images: {
						create: imagesToCreate,
					},
				},
				include: { images: true, service: true },
			});
			res.status(201).json(newWorkExample);
		} catch (error) {
			res.status(500).json({
				error: 'Failed to create work example',
				details: error.message,
			});
		}
	},

	// PUT /api/work-examples/:id - Обновить пример работы
	async update(req, res) {
		try {
			const { id } = req.params;
			const { name, date, description, serviceId } = req.body;
			const files = req.files;
			let oldImages = [];

			const updatedWorkExample = await prisma.$transaction(async (tx) => {
				// 1. Если загружены новые файлы, удаляем старые записи
				if (files && files.length > 0) {
					const workExampleToUpdate = await tx.workExample.findUnique({
						where: { id },
						select: { images: { select: { urlSingle: true } } },
					});
					oldImages = workExampleToUpdate?.images || [];

					await tx.image.deleteMany({
						where: { workExampleId: id },
					});
				}

				// 2. Обновляем данные и создаем новые записи Image
				const imagesToCreate =
					files?.map((file) => ({
						urlSingle: `/uploads/${file.filename}`,
						type: ImageType.SINGLE,
					})) || undefined;

				return tx.workExample.update({
					where: { id },
					data: {
						name,
						date: date ? new Date(date) : undefined,
						description,
						serviceId,
						...(imagesToCreate && {
							images: {
								create: imagesToCreate,
							},
						}),
					},
					include: { images: true, service: true },
				});
			});

			// 3. После успешной транзакции удаляем старые файлы с диска
			for (const image of oldImages) {
				if (image.urlSingle) {
					await deleteFile(image.urlSingle);
				}
			}

			res.json(updatedWorkExample);
		} catch (error) {
			res.status(500).json({
				error: 'Failed to update work example',
				details: error.message,
			});
		}
	},

	// DELETE /api/work-examples/:id - Удалить пример работы
	async delete(req, res) {
		try {
			const { id } = req.params;

			const workExampleToDelete = await prisma.workExample.findUnique({
				where: { id },
				include: { images: true },
			});
			const imagesToDelete = workExampleToDelete?.images || [];

			await prisma.workExample.delete({
				where: { id },
			});

			for (const image of imagesToDelete) {
				if (image.urlSingle) {
					await deleteFile(image.urlSingle);
				}
			}

			res.status(204).send(); // No Content
		} catch (error) {
			res.status(500).json({ error: 'Failed to delete work example' });
		}
	},
};

```

## src/lib/prisma.js

```javascript
// src/lib/prisma.js
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export default prisma;

```

## src/middleware/upload.js

```javascript
// src/middleware/upload.js
import multer from 'multer';
import path from 'path';
import fs from 'fs';

// Путь к директории для загрузок
const uploadDir = 'uploads';

// Убедимся, что директория для загрузок существует
if (!fs.existsSync(uploadDir)) {
	fs.mkdirSync(uploadDir);
}

// Настройка хранилища для multer
const storage = multer.diskStorage({
	// Указываем, куда сохранять файлы
	destination: (req, file, cb) => {
		cb(null, uploadDir);
	},
	// Генерируем уникальное имя для каждого файла
	filename: (req, file, cb) => {
		const uniqueSuffix =
			Date.now() + '-' + Math.round(Math.random() * 1e9);
		const extension = path.extname(file.originalname);
		cb(null, file.fieldname + '-' + uniqueSuffix + extension);
	},
});

// Создаем экземпляр multer с настроенным хранилищем
const upload = multer({ storage: storage });

export default upload;

```

## src/routes/car.routes.js

```javascript
// src/routes/car.routes.js
import { Router } from 'express';
import { carController } from '../controllers/car.controller.js';
import upload from '../middleware/upload.js';

const carRouter = Router();

// 'images' - это имя поля в multipart/form-data, 10 - макс. кол-во файлов
const uploader = upload.array('images', 10);

carRouter.get('/', carController.getAll);
carRouter.post('/', uploader, carController.create);
carRouter.get('/:id', carController.getById);
carRouter.put('/:id', uploader, carController.update);
carRouter.delete('/:id', carController.delete);

export default carRouter;

```

## src/routes/index.js

```javascript
// src/routes/index.js
import { Router } from 'express';
import carRouter from './car.routes.js';
import serviceRouter from './service.routes.js';
import workExampleRouter from './workExample.routes.js';
import settingsRouter from './settings.routes.js';

const apiRouter = Router();

// Регистрируем все роутеры в приложении
apiRouter.use('/cars', carRouter);
apiRouter.use('/services', serviceRouter);
apiRouter.use('/work-examples', workExampleRouter);
apiRouter.use('/settings', settingsRouter);

export default apiRouter;

```

## src/routes/service.routes.js

```javascript
// src/routes/service.routes.js
import { Router } from 'express';
import { serviceController } from '../controllers/service.controller.js';
import upload from '../middleware/upload.js';

const serviceRouter = Router();

const uploader = upload.array('images', 10);

serviceRouter.get('/', serviceController.getAll);
serviceRouter.post('/', uploader, serviceController.create);
serviceRouter.get('/:id', serviceController.getById);
serviceRouter.put('/:id', uploader, serviceController.update);
serviceRouter.delete('/:id', serviceController.delete);

export default serviceRouter;

```

## src/routes/settings.routes.js

```javascript
// src/routes/settings.routes.js
import { Router } from 'express';
import { settingsController } from '../controllers/settings.controller.js';

const settingsRouter = Router();

settingsRouter.get('/', settingsController.get);
// Используем POST для создания или обновления
settingsRouter.post('/', settingsController.update);
// Можно также добавить PUT для семантической корректности
settingsRouter.put('/', settingsController.update);

export default settingsRouter;

```

## src/routes/workExample.routes.js

```javascript
// src/routes/workExample.routes.js
import { Router } from 'express';
import { workExampleController } from '../controllers/workExample.controller.js';
import upload from '../middleware/upload.js';

const workExampleRouter = Router();

const uploader = upload.array('images', 10);

workExampleRouter.get('/', workExampleController.getAll);
workExampleRouter.post('/', uploader, workExampleController.create);
workExampleRouter.get('/:id', workExampleController.getById);
workExampleRouter.put('/:id', uploader, workExampleController.update);
workExampleRouter.delete('/:id', workExampleController.delete);

export default workExampleRouter;

```

## src/server.js

```javascript
// src/server.js
import 'dotenv/config'; // Загружает переменные из .env
import app from './app.js';

const PORT = process.env.PORT || 3001;

// Запуск сервера
const server = app.listen(PORT, () => {
	console.log(`🚀 Server is running on http://localhost:${PORT}`);
});

export const viteNodeApp = app; // Экспорт для vite-plugin-node

```

## prisma/migrations/20250611174926_init/migration.sql

```sql
-- CreateEnum
CREATE TYPE "ImageType" AS ENUM ('SINGLE', 'BEFORE_AFTER');

-- CreateTable
CREATE TABLE "Image" (
    "id" TEXT NOT NULL,
    "description" TEXT,
    "urlSingle" TEXT,
    "urlBefore" TEXT,
    "urlAfter" TEXT,
    "type" "ImageType" NOT NULL,
    "carId" TEXT,
    "serviceId" TEXT,
    "workExampleId" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Image_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Car" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "price" DOUBLE PRECISION NOT NULL,
    "description" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Car_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Service" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Service_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "WorkExample" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "date" TIMESTAMP(3) NOT NULL,
    "description" TEXT NOT NULL,
    "serviceId" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "WorkExample_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "SiteSettings" (
    "id" INTEGER NOT NULL DEFAULT 1,
    "mainTitle" TEXT NOT NULL DEFAULT 'Название автосервиса',
    "mainSubtitle" TEXT NOT NULL DEFAULT 'Лучший сервис в вашем городе',
    "phoneNumber" TEXT NOT NULL DEFAULT '+7 (000) 000-00-00',
    "socialInstagram" TEXT NOT NULL DEFAULT 'https://instagram.com',
    "socialVk" TEXT NOT NULL DEFAULT 'https://vk.com',
    "address" TEXT NOT NULL DEFAULT 'г. Город, ул. Улица, д. 1',
    "workingHours" TEXT NOT NULL DEFAULT 'Пн-Пт: 9:00 - 21:00',
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "SiteSettings_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "Service_name_key" ON "Service"("name");

-- AddForeignKey
ALTER TABLE "Image" ADD CONSTRAINT "Image_carId_fkey" FOREIGN KEY ("carId") REFERENCES "Car"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Image" ADD CONSTRAINT "Image_serviceId_fkey" FOREIGN KEY ("serviceId") REFERENCES "Service"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Image" ADD CONSTRAINT "Image_workExampleId_fkey" FOREIGN KEY ("workExampleId") REFERENCES "WorkExample"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "WorkExample" ADD CONSTRAINT "WorkExample_serviceId_fkey" FOREIGN KEY ("serviceId") REFERENCES "Service"("id") ON DELETE CASCADE ON UPDATE CASCADE;
```

## prisma/migrations/migration_lock.toml

```toml
provider = "postgresql"
```

## prisma/schema.prisma

```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------- СУЩНОСТИ -----------

// Тип изображения: одиночное или "до/после"
enum ImageType {
  SINGLE
  BEFORE_AFTER
}

model Image {
  id          String @id @default(cuid())
  description String? // Описание (Markdown)
  
  // Поля для разных типов ссылок
  urlSingle   String?
  urlBefore   String?
  urlAfter    String?

  type        ImageType

  // Связи (изображение может принадлежать одной из сущностей)
  carId         String?
  car           Car?     @relation(fields: [carId], references: [id], onDelete: Cascade)
  
  serviceId     String?
  service       Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  workExampleId String?
  workExample   WorkExample? @relation(fields: [workExampleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Car {
  id          String  @id @default(cuid())
  name        String
  price       Float
  description String // Описание (Markdown)
  images      Image[] // Массив изображений (связь "один ко многим")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          String  @id @default(cuid())
  name        String  @unique
  description String  // Описание (Markdown)
  images      Image[] // Массив изображений (связь "один ко многим")

  workExamples WorkExample[] // Услуга может иметь много примеров работ

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkExample {
  id          String   @id @default(cuid())
  name        String
  date        DateTime
  description String   // Описание (Markdown)
  images      Image[]  // Массив изображений (связь "один ко многим")
  
  // Связь с услугой (многие примеры к одной услуге)
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// ----------- УНИКАЛЬНЫЕ ДАННЫЕ (НАСТРОЙКИ САЙТА) -----------
// Будет всего одна запись в этой таблице
model SiteSettings {
  id              Int      @id @default(1) // Фиксированный ID для единственной записи
  mainTitle       String   @default("Название автосервиса")
  mainSubtitle    String   @default("Лучший сервис в вашем городе")
  phoneNumber     String   @default("+7 (000) 000-00-00")
  socialInstagram String   @default("https://instagram.com")
  socialVk        String   @default("https://vk.com")
  address         String   @default("г. Город, ул. Улица, д. 1")
  workingHours    String   @default("Пн-Пт: 9:00 - 21:00")
  
  updatedAt       DateTime @updatedAt
}
```

---

ПОЧЕМУ НА ЗАПРОС 

index-CIB5tW3n.js:213 
 GET https://tradeauto-group.ru/api/services 502 (Bad Gateway)